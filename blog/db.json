{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/inside/source/runtime.caef73fae70e33459c5a.js","path":"runtime.caef73fae70e33459c5a.js","modified":0,"renderable":1},{"_id":"themes/inside/source/styles.e987407a0a9d77c7ba00.css","path":"styles.e987407a0a9d77c7ba00.css","modified":0,"renderable":1},{"_id":"themes/inside/source/polyfills.28555e618578fe61f50a.js","path":"polyfills.28555e618578fe61f50a.js","modified":0,"renderable":1},{"_id":"themes/inside/source/main.e456207a2fb3a1560aeb.js","path":"main.e456207a2fb3a1560aeb.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/inside/.npmignore","hash":"9d676dfe520e57b71feb2c7376c68e76e6bc4a82","modified":1570039502379},{"_id":"themes/inside/.travis.yml","hash":"fdb62f6267df7356c6ffc91ffe21823677faf97d","modified":1570039502379},{"_id":"themes/inside/LICENSE","hash":"587ed58b79820b776e021afef12d76e9ed076a50","modified":1570039502379},{"_id":"themes/inside/README.md","hash":"ee189226452faa340152cd8a099bc2b98d1a2da5","modified":1570039502379},{"_id":"themes/inside/README_zh-Hans.md","hash":"9a0b09c9fe91affdc15f1797884a2d5e573c962d","modified":1570039502379},{"_id":"themes/inside/_config.yml","hash":"9ac972f11f8da60f590c3abe62d9fa11fe7a2ec9","modified":1570039502379},{"_id":"themes/inside/package.json","hash":"702ef3c28b4bb31914eb01179220583c4955f707","modified":1570039502382},{"_id":"themes/inside/avatar.jpg","hash":"9f80467c81cbd98c7804ace3bdf6393d4cf7fb1d","modified":1570039502380},{"_id":"source/_discarded/试.md","hash":"7d794d0699ddc11f754b7cffdd1ac45cfd3c5175","modified":1570039502370},{"_id":"source/_posts/hexo下完美插入图片.md","hash":"238a109f6c0268e5a64e951e1ddcbe733c7920ac","modified":1570039502370},{"_id":"source/_posts/linux服务器测试.md","hash":"3e6e8ed21a639c103e123e428ece0a9a85eaf959","modified":1570039816221},{"_id":"source/_posts/基于酷q平台的管理机器人.md","hash":"46ba44cc6742c1e60dfec124bd380eda05f3327d","modified":1570039502371},{"_id":"source/_posts/试第二篇.md","hash":"0300b82be33b4f50f636868409bc1e5035ca0bc7","modified":1570039502378},{"_id":"themes/inside/.github/stale.yml","hash":"f05279b6cc262959d0cc9f68647f9c641e970422","modified":1570039502379},{"_id":"themes/inside/languages/default.yml","hash":"98ef0c5ca2cba4c2c4d73f272d1d7169dee12812","modified":1570039502380},{"_id":"themes/inside/languages/en.yml","hash":"98ef0c5ca2cba4c2c4d73f272d1d7169dee12812","modified":1570039502380},{"_id":"themes/inside/languages/ja.yml","hash":"bfad61f0c139b85242fcf719250f3f5e25d937f7","modified":1570039502380},{"_id":"themes/inside/languages/zh-Hans.yml","hash":"bfb55afddc2a0cc49301b431e7f55db4eed4d4c0","modified":1570039502380},{"_id":"themes/inside/languages/zh-Hant.yml","hash":"80c02e8a192a342f3792885a5301f207ea5093ef","modified":1570039502380},{"_id":"themes/inside/layout/index.ejs","hash":"6604879f9fffa84b1fcac4d8813b8c19f6f42dbc","modified":1570039502380},{"_id":"themes/inside/lib/config.js","hash":"01e644ef5ae0079192cf8686392a07d3becf69d5","modified":1570039502380},{"_id":"themes/inside/lib/configSchema.json","hash":"6c33420a4bb658cb41850da509f1712bf79aae22","modified":1570039502380},{"_id":"themes/inside/lib/utils.js","hash":"588861c3565202bae12512f9c3003b8e0e55985d","modified":1570039502382},{"_id":"themes/inside/scripts/index.js","hash":"90f0ca3c58691fb9f15442405e9aad008ff14615","modified":1570039502382},{"_id":"themes/inside/source/_resources.json","hash":"3ef7786900cd41dbc69d708cfa4b9ffc9ba1f7e9","modified":1570039502382},{"_id":"themes/inside/source/_theme.js","hash":"23d7d44bfd5d48750c1d93d08874fa13e7ed45fe","modified":1570039502382},{"_id":"themes/inside/source/runtime.caef73fae70e33459c5a.js","hash":"a9aafcf49f49145093fc831efd9b8e2f6c71bb9c","modified":1570039502395},{"_id":"themes/inside/source/styles.e987407a0a9d77c7ba00.css","hash":"a7178865ca3b168434482b430edda17800679725","modified":1570039502396},{"_id":"themes/inside/test/README.md","hash":"c76a5fa79f8fcbcf76c6f4dfd41b6e3b490a0588","modified":1570039502396},{"_id":"themes/inside/test/index.js","hash":"6a7c309cdba50734a262f82f57a28d9484b4f257","modified":1570039502396},{"_id":"themes/inside/test/jasmine.json","hash":"2267491e589e5e17cb057d2cbf7b551b6e87783d","modified":1570039502396},{"_id":"themes/inside/source/polyfills.28555e618578fe61f50a.js","hash":"3f2bda6f4ad460988984e0da6cd479ef66ea7a79","modified":1570039502395},{"_id":"source/_posts/基于酷q平台的管理机器人/酷q配置坏境的注意事项.jpg","hash":"063638a3f3fc078ad055c8bba8ab6f53b6126944","modified":1570039502378},{"_id":"themes/inside/.github/ISSUE_TEMPLATE/bug-report-----.md","hash":"475fdf0aee8b8cacbc791b9fde25f5572908080a","modified":1570039502379},{"_id":"themes/inside/.github/ISSUE_TEMPLATE/bug_report.md","hash":"e67e87f263f048549b7a5a393ac029f0c526b23f","modified":1570039502379},{"_id":"themes/inside/.github/ISSUE_TEMPLATE/feature_request.md","hash":"fd93eeb2ed3064a48bbc812efd6f4182b520f8c9","modified":1570039502379},{"_id":"themes/inside/.github/ISSUE_TEMPLATE/question.md","hash":"0dbbd19d77b5fb9a843f3e33247df2266d342bc2","modified":1570039502379},{"_id":"themes/inside/lib/filter/index.js","hash":"dfe888fe92ed7074ec2aa36a042ae52f640bec35","modified":1570039502380},{"_id":"themes/inside/lib/filter/post.js","hash":"afd056f699c12df23d6d672f61f7d32f8a4aa090","modified":1570039502380},{"_id":"themes/inside/lib/filter/templates.js","hash":"8b540fb05c1105c286f167c6ebf132cb188eca6f","modified":1570039502380},{"_id":"themes/inside/lib/generator/config.js","hash":"b8c632078536ebc72375ec5aa747c58f4e45da76","modified":1570039502380},{"_id":"themes/inside/lib/generator/index.js","hash":"e10a7e0013d4887ff72f8307ef9ea3216537e53f","modified":1570039502381},{"_id":"themes/inside/lib/generator/manifest.js","hash":"7994ef9242d019fcc4f4ee9ecf2c2e17d9f12daa","modified":1570039502381},{"_id":"themes/inside/lib/generator/sitemap.js","hash":"f0729fe8231702046aaf72e7f282ee90308a6b44","modified":1570039502381},{"_id":"themes/inside/lib/generator/sw.js","hash":"44ac846f1ebdc06aad555b2bf1f22126bc22aee7","modified":1570039502381},{"_id":"themes/inside/lib/generator/theme.js","hash":"cdb8a1683417ff19c3d76e14cc066ceb07aec125","modified":1570039502381},{"_id":"themes/inside/lib/helper/ga.js","hash":"ce09016863d39d96ae38b80aa28202faa8635524","modified":1570039502381},{"_id":"themes/inside/lib/helper/index.js","hash":"80dee4ed2f43f6d1739c1f7fc14276ae9db1f650","modified":1570039502381},{"_id":"themes/inside/lib/helper/structured_data.js","hash":"a37c5aa02cf002392c2199baf01eb938ee8dd517","modified":1570039502381},{"_id":"themes/inside/lib/helper/url_trim.js","hash":"16288ca371b5af345fbfc5d556349e1879f23a0a","modified":1570039502381},{"_id":"themes/inside/lib/tag/canvas.js","hash":"47f9819fe60b1af3d5e2695ff8aa32ea5de88a8f","modified":1570039502381},{"_id":"themes/inside/lib/tag/gist.js","hash":"ae7a2338748070c32d21f2376dcab235d88e558c","modified":1570039502381},{"_id":"themes/inside/lib/tag/index.js","hash":"f82e11d43e688af043e3921f9b8ba292a559919d","modified":1570039502381},{"_id":"themes/inside/lib/theme-processor/index.js","hash":"cf26af9d1a70a6569e26ad8910720bbc13f5bfe0","modified":1570039502381},{"_id":"themes/inside/lib/theme-processor/localized-script.js","hash":"20c24f57f3bd1c01b61078052a8b5397245d731e","modified":1570039502381},{"_id":"source/_posts/基于酷q平台的管理机器人/idea新建项目.png","hash":"0026d0df8f7ae8344dd4253f49cbdb60234d8bb1","modified":1570039502371},{"_id":"source/_posts/基于酷q平台的管理机器人/请假文档.jpg","hash":"3cb4327ce4afdd8ab91c5e7ea2a8e41964fa4f62","modified":1570039502377},{"_id":"source/_posts/基于酷q平台的管理机器人/通知.jpg","hash":"80221ec8da96e102e46d7ce817f55ee7ec7e6f3e","modified":1570039502378},{"_id":"source/_posts/基于酷q平台的管理机器人/补登请假.jpg","hash":"e994bb24b249a20ebdf956a029212dc045dbb785","modified":1570039502373},{"_id":"themes/inside/lib/generator/entries/archives.js","hash":"fbfdb2dad7e3ccae4dbad6784637f599524677e0","modified":1570039502380},{"_id":"themes/inside/lib/generator/entries/categories.js","hash":"1ef5e05c243ae252276dc13ddf0e1f65fa580e83","modified":1570039502381},{"_id":"themes/inside/lib/generator/entries/index.js","hash":"3f73e49c2293c5e34e2bb02a3e9b0f70b36efd85","modified":1570039502381},{"_id":"themes/inside/lib/generator/entries/pages.js","hash":"bbe5e13bc48c0961c1295b4018621227211af1de","modified":1570039502381},{"_id":"themes/inside/lib/generator/entries/posts.js","hash":"851c8e8f13fd9fd1981460413b216710eefc8559","modified":1570039502381},{"_id":"themes/inside/lib/generator/entries/properties.js","hash":"f772e3a49ae4cba08afce145c84b934a6c18d1d7","modified":1570039502381},{"_id":"themes/inside/lib/generator/entries/search.js","hash":"6777ac3a3144b81984fd953d7f30932e5fe3dd49","modified":1570039502381},{"_id":"themes/inside/lib/generator/entries/tags.js","hash":"a02a56e71bb43b81321c1aed405faa4afb015f2e","modified":1570039502381},{"_id":"themes/inside/test/scripts/filters/index.js","hash":"2e61288c283017d858938a6934bbb993ac22f7c8","modified":1570039502396},{"_id":"themes/inside/test/scripts/filters/post.js","hash":"d519ee96be2f0fe46d88df3c9b69911f46acd04a","modified":1570039502396},{"_id":"themes/inside/test/scripts/filters/template.js","hash":"30396051039adbd1fdff0540d5d9f8cedef9602a","modified":1570039502396},{"_id":"themes/inside/test/scripts/helpers/ga.js","hash":"f09cd1bf4f89ca43f0bd28015eacdbd84009dd35","modified":1570039502396},{"_id":"themes/inside/test/scripts/helpers/index.js","hash":"feb1f2f6579d4a8776a21c84d633b34230ccebd8","modified":1570039502396},{"_id":"themes/inside/test/scripts/helpers/structured_data.js","hash":"0d10cecafdcb82137064f5ecc2d7564055b20cf3","modified":1570039502396},{"_id":"themes/inside/test/scripts/helpers/url_trim.js","hash":"bf44b08acf7c1b3082b2698138cea08705caa4df","modified":1570039502396},{"_id":"themes/inside/test/scripts/tags/canvas.js","hash":"db3034dc397c14dc8329163d8578344d9165324c","modified":1570039502396},{"_id":"themes/inside/test/scripts/tags/gist.js","hash":"22d6450d18063cd24005118bc0c3e8ff71a5e079","modified":1570039502396},{"_id":"themes/inside/test/scripts/tags/index.js","hash":"0ef7e2cfdea00525c37a9fcc4dcff7e4c1779aa6","modified":1570039502396},{"_id":"themes/inside/test/scripts/utils/index.js","hash":"596a67635317b4d2c020a8989277c43f574ec217","modified":1570039502396},{"_id":"themes/inside/test/scripts/utils/parseConfig.js","hash":"39afaa8c8785c6a842279f31875a25ea3aff4813","modified":1570039502396},{"_id":"themes/inside/test/scripts/utils/rest.js","hash":"7729b59a66a970afd8c38dc39f4ed986f84e703e","modified":1570039502396},{"_id":"source/_posts/基于酷q平台的管理机器人/导包.png","hash":"7e71c94363d693cb15674346a2fd02f69cfc9a1d","modified":1570039502372},{"_id":"themes/inside/source/main.5509fae49a8263eb6b15.zh-Hant.js","hash":"ce550ad820967b20739a2b77028d3ed1bed1da85","modified":1570039502386},{"_id":"themes/inside/source/main.77374c447781af9644db.ja.js","hash":"dcd1d94f7e6829656a4eb9e5fcf42ee79079432a","modified":1570039502394},{"_id":"themes/inside/source/main.e456207a2fb3a1560aeb.js","hash":"4879a70693728cf20564f6a200bfc59586136e53","modified":1570039502394},{"_id":"themes/inside/source/main.1efb2acb62d508679d87.zh-Hans.js","hash":"ee7726cde8ea65e65768fc3873ec5e4c69433758","modified":1570039502384},{"_id":"source/_posts/基于酷q平台的管理机器人/请假.jpg","hash":"1d5ff10c29d7aab41ce2f546bf8ad5ed9782beb4","modified":1570039502377},{"_id":"source/_drafts/linux服务器测试.md","hash":"3e6e8ed21a639c103e123e428ece0a9a85eaf959","modified":1570041453359},{"_id":"public/search.xml","hash":"a9e5632e821726e036248163d237d1f7553c1b37","modified":1570042799083},{"_id":"public/theme.5d06e5acb511be531730.css","hash":"697dda622aaa9c89cccdeffdafbe0b7320ecd7a0","modified":1570042799083},{"_id":"public/api/MjAxOS8xMC8wMy9saW51eOacjeWKoeWZqOa1i+ivlQ.json","hash":"6b8394275b088be6080ad95aa75193059f9f0826","modified":1570042799084},{"_id":"public/api/MjAxOS8xMC8wMi/or5XnrKzkuoznr4c.json","hash":"d96843a6cf93f32d57e5feee8257ec363108f147","modified":1570042799085},{"_id":"public/api/MjAxOS8xMC8wMS9oZXhv5LiL5a6M576O5o+S5YWl5Zu+54mH.json","hash":"8a70da99bdde59e1f7b83da13b592f3f4503aea6","modified":1570042799086},{"_id":"public/api/MjAxOS8xMC8wMS/ln7rkuo7phbdx5bmz5Y+w55qE566h55CG5py65Zmo5Lq6.json","hash":"aa09ebe7486317f327764392fd7b28c8663ba3b8","modified":1570042799086},{"_id":"public/api/cGFnZQ.json","hash":"1d324018a57f64b4b6ab166494550be749bf941f","modified":1570042799086},{"_id":"public/api/dGFncw.json","hash":"d2edceaf116f4b1fe113d1630c2729aff179667f","modified":1570042799086},{"_id":"public/api/dGFncy9oZXhv6YWN572u.json","hash":"988e24f8847a73fd1942254aedeb25beea8d5db8","modified":1570042799086},{"_id":"public/api/dGFncy/kuJbnlYzov5nkuYjlpKfvvIzlvZPnhLbopoHlpJrljrvnnIvnnIs.json","hash":"09fd047811a4461274a3f72e51742e858086ebfa","modified":1570042799086},{"_id":"public/api/Y2F0ZWdvcmllcw.json","hash":"bc712afbbd1cd236bc1b191052972edfff70688e","modified":1570042799086},{"_id":"public/api/Y2F0ZWdvcmllcy/lhbTotqM.json","hash":"0117a5bf6ce52ce854bfb2deda542c23ee4edf22","modified":1570042799086},{"_id":"public/api/YXJjaGl2ZXM.json","hash":"7e04d1ed4c326075b7d3fa55ba58797dac2b6b37","modified":1570042799086},{"_id":"public/api/c2VhcmNo.json","hash":"461108f2cfe2cdd5e0918613055c909b0e0602cb","modified":1570042799086},{"_id":"public/sitemap.xml","hash":"0607b3aa1ab1699309a328a8ef378be1c42cd352","modified":1570042799086},{"_id":"public/manifest.json","hash":"74615ee17004da13baaca159b833c1f0cdb2639b","modified":1570042799087},{"_id":"public/sw.js","hash":"7b922a2c94495936a4a90e2dae9b168ac43d111e","modified":1570042799087},{"_id":"public/404/index.html","hash":"9ac7c411eabe74e7a7d98cf8bf207bf11d9fd46a","modified":1570042799089},{"_id":"public/2019/10/03/linux服务器测试/index.html","hash":"7372c578975d2d6d9a6f701d0e42036471e397f1","modified":1570042799089},{"_id":"public/2019/10/02/试第二篇/index.html","hash":"badc004d9887172fc171759981e16ebbad5ff367","modified":1570042799089},{"_id":"public/2019/10/01/hexo下完美插入图片/index.html","hash":"54381169e5a59c1bbe92f5af4c8174270196b024","modified":1570042799089},{"_id":"public/2019/10/01/基于酷q平台的管理机器人/index.html","hash":"4115bf2e87876ebe0f1a06d731eb88e32b4e0b41","modified":1570042799089},{"_id":"public/index.html","hash":"50e4ac045ab3242ed7301ee8b89c481e83e15f55","modified":1570042799089},{"_id":"public/tags/index.html","hash":"8874af143fdd8a352cff85d2b8250215b8a5c674","modified":1570042799089},{"_id":"public/tags/hexo配置/index.html","hash":"ad40eae387fb9ec55142072a29619cf45a8b1489","modified":1570042799089},{"_id":"public/tags/世界这么大，当然要多去看看/index.html","hash":"ad0b8762a656356ab952380c93c1f14191e84cac","modified":1570042799090},{"_id":"public/categories/index.html","hash":"e4623fd07df18512b687bdc8ed7a5dfae665fe21","modified":1570042799090},{"_id":"public/categories/兴趣/index.html","hash":"536ee10cdc0c21c184dba6651c3557e698cec0f9","modified":1570042799090},{"_id":"public/archives/index.html","hash":"85585e5506fe2a1019004196efb086b6c263576e","modified":1570042799090},{"_id":"public/search/index.html","hash":"04877acc0867c56429749d113dfa9337eeef58e9","modified":1570042799090},{"_id":"public/config.8b784704802abeb0b235.js","hash":"c149e3e0e745ab900e703d7b86ccac07dea644be","modified":1570042799090}],"Category":[{"name":"兴趣","_id":"ck19lzc6l0002bv5fug5km90w"}],"Data":[],"Page":[],"Post":[{"title":"基于酷q平台的管理机器人","date":"2019-10-01T12:15:14.000Z","_content":"\n## 酷Q机器人\n\n***********************\n\n**自从samrtQQ下线之后，很多QQ机器人都失效了。**\n\n**但是最近又比较想用这样一个机器人来管理减轻自己的一些工作，于是千方百计的我发现了酷Q。**\n\n**这里附上[官网链接](https://cqp.cc/)**\n\n### 开发以及注意事项\n1. ##### SDK的选择\n\n   酷q提供了多种[SDK](https://cqp.cc/t/15124)但是都是我不常用的，官方的支持的SDK是E语言，这语言emmmm好，都好，写，都可以写。虽然提供了java的sdk但是java版本始终不是正统，咬牙学了一天E语言，最后还是吐了。没办法，不习惯，没说E语言不好。害，最后还是选择的java版本。不过但是还没开始使用的时候我看到了更加好用的一个找到一个更加好用方便的SDK-[PicqBotX](https://github.com/HyDevelop/PicqBotX)，这是通过http的插件来与酷q的程序交互。虽然不能像官方网站上提供的那个那样可以直接打包成jar运行但是个人认为开发更加简单。\n\n2. **环境以及配置细节**\n\n   [这里讲得很清楚，以下说明几个坑](https://github.com/HyDevelop/PicqBotX)：\n\n   * 如果使用kotlin代替java进行开发，请最好使用Gradle对项目进行管理，它对kotlin有更加完美的支持。\n\n   * ![](基于酷q平台的管理机器人/酷q配置坏境的注意事项.jpg)\n\n     在介绍readme中的这个位置一定要看准，下载对应版本的工具，否则可能出问题，比较麻烦，而且没有提示难以排查。\n\n   * 两个端口号一定要对应于你程序中的机器人的端口号否则会链接失败（建议直接用默认的31091 31092，也可自己选择）\n\n\n\n### 本人开发流程\n\n1. 使用idea新建项目选择gradle管理项目![](基于酷q平台的管理机器人/idea新建项目.png)java版本任意，需要kotlin开发勾选kotlin\n\n2. 导包\n\n   ![](基于酷q平台的管理机器人/导包.png)\n\n   导入最新的sdk。\n\n3. 根据需要复制示例代码更改\n\n   ```java\n   public class TestBot\n   {\n       public static void main(String[] args)\n       {\n           // 创建机器人对象 ( 传入配置 )\n           PicqBotX bot = new PicqBotX(new PicqConfig(31092).setDebug(true));\n   \n           // 添加一个机器人账户 ( 名字, 发送URL, 发送端口 )\n           bot.addAccount(\"Bot01\", \"127.0.0.1\", 31091);\n   \n           // 注册事件监听器, 可以注册多个监听器\n           bot.getEventManager().registerListeners(\n                   new TestListener(), \n                   new RequestListener(),\n                   new ExceptionListener()\n           );\n   \n           // 启用指令管理器\n           // 这些字符串是指令前缀, 比如指令\"!help\"的前缀就是\"!\"\n           bot.enableCommandManager(\"bot -\", \"!\", \"/\", \"~\");\n   \n           // 注册指令, 可以注册多个指令\n           bot.getCommandManager().registerCommands(\n                   new CommandSay(),\n                   new CommandTest(),\n                   new CommandVersion()\n           );\n   \n           // 启动机器人, 不会占用主线程\n           bot.startBot();\n       }\n   }\n   ```\n\n\n\n### 个人实现效果和功能\n\n- 通知功能\n\n  <img src=\"基于酷q平台的管理机器人/通知.jpg\" style=\"zoom:50%;\" />\n\n- 请假功能\n\n  有学生请假则会以json格式文本保存在服务器（或者本地）\n\n  <img src=\"基于酷q平台的管理机器人/请假.jpg\" style=\"zoom: 33%;\" />\n\n- 导出请假表格文档，会直接给下载链接\n\n  <img src=\"基于酷q平台的管理机器人/请假文档.jpg\" style=\"zoom: 50%;\" />\n\n- 补登请假\n\n  <img src=\"基于酷q平台的管理机器人/补登请假.jpg\" style=\"zoom: 50%;\" />\n\n- 还有安卓端的管理app和网页版实时查看数据。\n\n\n\n### 部署机器人\n\n\n\n\n\n### 用到的库\n\n*********************************\n\n* 阿帕奇的表格框架\n* gson\n\n通知管理机器人源代码地址：[冷漠无情的机器人]()\n\n因为源代码中有不少私人数据，所以取消。\n\n","source":"_posts/基于酷q平台的管理机器人.md","raw":"---\ntitle: 基于酷q平台的管理机器人\ndate: 2019-10-01 20:15:14\ntags:\n- 世界这么大，当然要多去看看\ncategories: 兴趣\n---\n\n## 酷Q机器人\n\n***********************\n\n**自从samrtQQ下线之后，很多QQ机器人都失效了。**\n\n**但是最近又比较想用这样一个机器人来管理减轻自己的一些工作，于是千方百计的我发现了酷Q。**\n\n**这里附上[官网链接](https://cqp.cc/)**\n\n### 开发以及注意事项\n1. ##### SDK的选择\n\n   酷q提供了多种[SDK](https://cqp.cc/t/15124)但是都是我不常用的，官方的支持的SDK是E语言，这语言emmmm好，都好，写，都可以写。虽然提供了java的sdk但是java版本始终不是正统，咬牙学了一天E语言，最后还是吐了。没办法，不习惯，没说E语言不好。害，最后还是选择的java版本。不过但是还没开始使用的时候我看到了更加好用的一个找到一个更加好用方便的SDK-[PicqBotX](https://github.com/HyDevelop/PicqBotX)，这是通过http的插件来与酷q的程序交互。虽然不能像官方网站上提供的那个那样可以直接打包成jar运行但是个人认为开发更加简单。\n\n2. **环境以及配置细节**\n\n   [这里讲得很清楚，以下说明几个坑](https://github.com/HyDevelop/PicqBotX)：\n\n   * 如果使用kotlin代替java进行开发，请最好使用Gradle对项目进行管理，它对kotlin有更加完美的支持。\n\n   * ![](基于酷q平台的管理机器人/酷q配置坏境的注意事项.jpg)\n\n     在介绍readme中的这个位置一定要看准，下载对应版本的工具，否则可能出问题，比较麻烦，而且没有提示难以排查。\n\n   * 两个端口号一定要对应于你程序中的机器人的端口号否则会链接失败（建议直接用默认的31091 31092，也可自己选择）\n\n\n\n### 本人开发流程\n\n1. 使用idea新建项目选择gradle管理项目![](基于酷q平台的管理机器人/idea新建项目.png)java版本任意，需要kotlin开发勾选kotlin\n\n2. 导包\n\n   ![](基于酷q平台的管理机器人/导包.png)\n\n   导入最新的sdk。\n\n3. 根据需要复制示例代码更改\n\n   ```java\n   public class TestBot\n   {\n       public static void main(String[] args)\n       {\n           // 创建机器人对象 ( 传入配置 )\n           PicqBotX bot = new PicqBotX(new PicqConfig(31092).setDebug(true));\n   \n           // 添加一个机器人账户 ( 名字, 发送URL, 发送端口 )\n           bot.addAccount(\"Bot01\", \"127.0.0.1\", 31091);\n   \n           // 注册事件监听器, 可以注册多个监听器\n           bot.getEventManager().registerListeners(\n                   new TestListener(), \n                   new RequestListener(),\n                   new ExceptionListener()\n           );\n   \n           // 启用指令管理器\n           // 这些字符串是指令前缀, 比如指令\"!help\"的前缀就是\"!\"\n           bot.enableCommandManager(\"bot -\", \"!\", \"/\", \"~\");\n   \n           // 注册指令, 可以注册多个指令\n           bot.getCommandManager().registerCommands(\n                   new CommandSay(),\n                   new CommandTest(),\n                   new CommandVersion()\n           );\n   \n           // 启动机器人, 不会占用主线程\n           bot.startBot();\n       }\n   }\n   ```\n\n\n\n### 个人实现效果和功能\n\n- 通知功能\n\n  <img src=\"基于酷q平台的管理机器人/通知.jpg\" style=\"zoom:50%;\" />\n\n- 请假功能\n\n  有学生请假则会以json格式文本保存在服务器（或者本地）\n\n  <img src=\"基于酷q平台的管理机器人/请假.jpg\" style=\"zoom: 33%;\" />\n\n- 导出请假表格文档，会直接给下载链接\n\n  <img src=\"基于酷q平台的管理机器人/请假文档.jpg\" style=\"zoom: 50%;\" />\n\n- 补登请假\n\n  <img src=\"基于酷q平台的管理机器人/补登请假.jpg\" style=\"zoom: 50%;\" />\n\n- 还有安卓端的管理app和网页版实时查看数据。\n\n\n\n### 部署机器人\n\n\n\n\n\n### 用到的库\n\n*********************************\n\n* 阿帕奇的表格框架\n* gson\n\n通知管理机器人源代码地址：[冷漠无情的机器人]()\n\n因为源代码中有不少私人数据，所以取消。\n\n","slug":"基于酷q平台的管理机器人","published":1,"updated":"2019-10-02T18:05:02.371Z","comments":1,"layout":"post","photos":[],"link":"2019/10/01/基于酷q平台的管理机器人","_id":"ck19lzc6h0001bv5fw3svxcsz","content":"<h2 id=\"酷Q机器人\">酷Q机器人<a href=\"2019/10/01/基于酷q平台的管理机器人#酷Q机器人\"></a></h2><hr>\n<p><strong>自从samrtQQ下线之后，很多QQ机器人都失效了。</strong></p>\n<p><strong>但是最近又比较想用这样一个机器人来管理减轻自己的一些工作，于是千方百计的我发现了酷Q。</strong></p>\n<p><strong>这里附上<a href=\"https://cqp.cc/\" target=\"_blank\" rel=\"noopener\">官网链接</a></strong></p>\n<h3 id=\"开发以及注意事项\">开发以及注意事项<a href=\"2019/10/01/基于酷q平台的管理机器人#开发以及注意事项\"></a></h3><ol>\n<li><h5 id=\"SDK的选择\"><a href=\"2019/10/01/基于酷q平台的管理机器人#SDK的选择\" class=\"headerlink\" title=\"SDK的选择\"></a>SDK的选择</h5><p>酷q提供了多种<a href=\"https://cqp.cc/t/15124\" target=\"_blank\" rel=\"noopener\">SDK</a>但是都是我不常用的，官方的支持的SDK是E语言，这语言emmmm好，都好，写，都可以写。虽然提供了java的sdk但是java版本始终不是正统，咬牙学了一天E语言，最后还是吐了。没办法，不习惯，没说E语言不好。害，最后还是选择的java版本。不过但是还没开始使用的时候我看到了更加好用的一个找到一个更加好用方便的SDK-<a href=\"https://github.com/HyDevelop/PicqBotX\" target=\"_blank\" rel=\"noopener\">PicqBotX</a>，这是通过http的插件来与酷q的程序交互。虽然不能像官方网站上提供的那个那样可以直接打包成jar运行但是个人认为开发更加简单。</p>\n</li>\n<li><p><strong>环境以及配置细节</strong></p>\n<p><a href=\"https://github.com/HyDevelop/PicqBotX\" target=\"_blank\" rel=\"noopener\">这里讲得很清楚，以下说明几个坑</a>：</p>\n<ul>\n<li><p>如果使用kotlin代替java进行开发，请最好使用Gradle对项目进行管理，它对kotlin有更加完美的支持。</p>\n</li>\n<li><p><img src=\"/2019/10/01/基于酷q平台的管理机器人/%E9%85%B7q%E9%85%8D%E7%BD%AE%E5%9D%8F%E5%A2%83%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.jpg\" alt class=\"article-img\"></p>\n<p>在介绍readme中的这个位置一定要看准，下载对应版本的工具，否则可能出问题，比较麻烦，而且没有提示难以排查。</p>\n</li>\n<li><p>两个端口号一定要对应于你程序中的机器人的端口号否则会链接失败（建议直接用默认的31091 31092，也可自己选择）</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"本人开发流程\">本人开发流程<a href=\"2019/10/01/基于酷q平台的管理机器人#本人开发流程\"></a></h3><ol>\n<li><p>使用idea新建项目选择gradle管理项目<img src=\"/2019/10/01/基于酷q平台的管理机器人/idea%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.png\" alt>java版本任意，需要kotlin开发勾选kotlin</p>\n</li>\n<li><p>导包</p>\n<p><img src=\"/2019/10/01/基于酷q平台的管理机器人/%E5%AF%BC%E5%8C%85.png\" alt class=\"article-img\"></p>\n<p>导入最新的sdk。</p>\n</li>\n<li><p>根据需要复制示例代码更改</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBot</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建机器人对象 ( 传入配置 )</span></span><br><span class=\"line\">        PicqBotX bot = <span class=\"keyword\">new</span> PicqBotX(<span class=\"keyword\">new</span> PicqConfig(<span class=\"number\">31092</span>).setDebug(<span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加一个机器人账户 ( 名字, 发送URL, 发送端口 )</span></span><br><span class=\"line\">        bot.addAccount(<span class=\"string\">\"Bot01\"</span>, <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">31091</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册事件监听器, 可以注册多个监听器</span></span><br><span class=\"line\">        bot.getEventManager().registerListeners(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> TestListener(), </span><br><span class=\"line\">                <span class=\"keyword\">new</span> RequestListener(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ExceptionListener()</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启用指令管理器</span></span><br><span class=\"line\">        <span class=\"comment\">// 这些字符串是指令前缀, 比如指令\"!help\"的前缀就是\"!\"</span></span><br><span class=\"line\">        bot.enableCommandManager(<span class=\"string\">\"bot -\"</span>, <span class=\"string\">\"!\"</span>, <span class=\"string\">\"/\"</span>, <span class=\"string\">\"~\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册指令, 可以注册多个指令</span></span><br><span class=\"line\">        bot.getCommandManager().registerCommands(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> CommandSay(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> CommandTest(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> CommandVersion()</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动机器人, 不会占用主线程</span></span><br><span class=\"line\">        bot.startBot();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ol>\n<h3 id=\"个人实现效果和功能\">个人实现效果和功能<a href=\"2019/10/01/基于酷q平台的管理机器人#个人实现效果和功能\"></a></h3><ul>\n<li><p>通知功能</p>\n<img src=\"/2019/10/01/基于酷q平台的管理机器人/通知.jpg\" style=\"zoom:50%;\">\n</li>\n<li><p>请假功能</p>\n<p>有学生请假则会以json格式文本保存在服务器（或者本地）</p>\n<img src=\"/2019/10/01/基于酷q平台的管理机器人/请假.jpg\" style=\"zoom: 33%;\">\n</li>\n<li><p>导出请假表格文档，会直接给下载链接</p>\n<img src=\"/2019/10/01/基于酷q平台的管理机器人/请假文档.jpg\" style=\"zoom: 50%;\">\n</li>\n<li><p>补登请假</p>\n<img src=\"/2019/10/01/基于酷q平台的管理机器人/补登请假.jpg\" style=\"zoom: 50%;\">\n</li>\n<li><p>还有安卓端的管理app和网页版实时查看数据。</p>\n</li>\n</ul>\n<h3 id=\"部署机器人\">部署机器人<a href=\"2019/10/01/基于酷q平台的管理机器人#部署机器人\"></a></h3><h3 id=\"用到的库\">用到的库<a href=\"2019/10/01/基于酷q平台的管理机器人#用到的库\"></a></h3><hr>\n<ul>\n<li>阿帕奇的表格框架</li>\n<li>gson</li>\n</ul>\n<p>通知管理机器人源代码地址：<a href>冷漠无情的机器人</a></p>\n<p>因为源代码中有不少私人数据，所以取消。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"酷Q机器人\"><a href=\"#酷Q机器人\" class=\"headerlink\" title=\"酷Q机器人\"></a>酷Q机器人</h2><hr>\n<p><strong>自从samrtQQ下线之后，很多QQ机器人都失效了。</strong></p>\n<p><strong>但是最近又比较想用这样一个机器人来管理减轻自己的一些工作，于是千方百计的我发现了酷Q。</strong></p>\n<p><strong>这里附上<a href=\"https://cqp.cc/\" target=\"_blank\" rel=\"noopener\">官网链接</a></strong></p>\n<h3 id=\"开发以及注意事项\"><a href=\"#开发以及注意事项\" class=\"headerlink\" title=\"开发以及注意事项\"></a>开发以及注意事项</h3><ol>\n<li><h5 id=\"SDK的选择\"><a href=\"#SDK的选择\" class=\"headerlink\" title=\"SDK的选择\"></a>SDK的选择</h5><p>酷q提供了多种<a href=\"https://cqp.cc/t/15124\" target=\"_blank\" rel=\"noopener\">SDK</a>但是都是我不常用的，官方的支持的SDK是E语言，这语言emmmm好，都好，写，都可以写。虽然提供了java的sdk但是java版本始终不是正统，咬牙学了一天E语言，最后还是吐了。没办法，不习惯，没说E语言不好。害，最后还是选择的java版本。不过但是还没开始使用的时候我看到了更加好用的一个找到一个更加好用方便的SDK-<a href=\"https://github.com/HyDevelop/PicqBotX\" target=\"_blank\" rel=\"noopener\">PicqBotX</a>，这是通过http的插件来与酷q的程序交互。虽然不能像官方网站上提供的那个那样可以直接打包成jar运行但是个人认为开发更加简单。</p>\n</li>\n<li><p><strong>环境以及配置细节</strong></p>\n<p><a href=\"https://github.com/HyDevelop/PicqBotX\" target=\"_blank\" rel=\"noopener\">这里讲得很清楚，以下说明几个坑</a>：</p>\n<ul>\n<li><p>如果使用kotlin代替java进行开发，请最好使用Gradle对项目进行管理，它对kotlin有更加完美的支持。</p>\n</li>\n<li><p><img src=\"/2019/10/01/基于酷q平台的管理机器人/%E9%85%B7q%E9%85%8D%E7%BD%AE%E5%9D%8F%E5%A2%83%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.jpg\" alt></p>\n<p>在介绍readme中的这个位置一定要看准，下载对应版本的工具，否则可能出问题，比较麻烦，而且没有提示难以排查。</p>\n</li>\n<li><p>两个端口号一定要对应于你程序中的机器人的端口号否则会链接失败（建议直接用默认的31091 31092，也可自己选择）</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"本人开发流程\"><a href=\"#本人开发流程\" class=\"headerlink\" title=\"本人开发流程\"></a>本人开发流程</h3><ol>\n<li><p>使用idea新建项目选择gradle管理项目<img src=\"/2019/10/01/基于酷q平台的管理机器人/idea%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.png\" alt>java版本任意，需要kotlin开发勾选kotlin</p>\n</li>\n<li><p>导包</p>\n<p><img src=\"/2019/10/01/基于酷q平台的管理机器人/%E5%AF%BC%E5%8C%85.png\" alt></p>\n<p>导入最新的sdk。</p>\n</li>\n<li><p>根据需要复制示例代码更改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBot</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建机器人对象 ( 传入配置 )</span></span><br><span class=\"line\">        PicqBotX bot = <span class=\"keyword\">new</span> PicqBotX(<span class=\"keyword\">new</span> PicqConfig(<span class=\"number\">31092</span>).setDebug(<span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加一个机器人账户 ( 名字, 发送URL, 发送端口 )</span></span><br><span class=\"line\">        bot.addAccount(<span class=\"string\">\"Bot01\"</span>, <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">31091</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册事件监听器, 可以注册多个监听器</span></span><br><span class=\"line\">        bot.getEventManager().registerListeners(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> TestListener(), </span><br><span class=\"line\">                <span class=\"keyword\">new</span> RequestListener(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ExceptionListener()</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启用指令管理器</span></span><br><span class=\"line\">        <span class=\"comment\">// 这些字符串是指令前缀, 比如指令\"!help\"的前缀就是\"!\"</span></span><br><span class=\"line\">        bot.enableCommandManager(<span class=\"string\">\"bot -\"</span>, <span class=\"string\">\"!\"</span>, <span class=\"string\">\"/\"</span>, <span class=\"string\">\"~\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册指令, 可以注册多个指令</span></span><br><span class=\"line\">        bot.getCommandManager().registerCommands(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> CommandSay(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> CommandTest(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> CommandVersion()</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动机器人, 不会占用主线程</span></span><br><span class=\"line\">        bot.startBot();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"个人实现效果和功能\"><a href=\"#个人实现效果和功能\" class=\"headerlink\" title=\"个人实现效果和功能\"></a>个人实现效果和功能</h3><ul>\n<li><p>通知功能</p>\n<img src=\"/2019/10/01/基于酷q平台的管理机器人/通知.jpg\" style=\"zoom:50%;\">\n</li>\n<li><p>请假功能</p>\n<p>有学生请假则会以json格式文本保存在服务器（或者本地）</p>\n<img src=\"/2019/10/01/基于酷q平台的管理机器人/请假.jpg\" style=\"zoom: 33%;\">\n</li>\n<li><p>导出请假表格文档，会直接给下载链接</p>\n<img src=\"/2019/10/01/基于酷q平台的管理机器人/请假文档.jpg\" style=\"zoom: 50%;\">\n</li>\n<li><p>补登请假</p>\n<img src=\"/2019/10/01/基于酷q平台的管理机器人/补登请假.jpg\" style=\"zoom: 50%;\">\n</li>\n<li><p>还有安卓端的管理app和网页版实时查看数据。</p>\n</li>\n</ul>\n<h3 id=\"部署机器人\"><a href=\"#部署机器人\" class=\"headerlink\" title=\"部署机器人\"></a>部署机器人</h3><h3 id=\"用到的库\"><a href=\"#用到的库\" class=\"headerlink\" title=\"用到的库\"></a>用到的库</h3><hr>\n<ul>\n<li>阿帕奇的表格框架</li>\n<li>gson</li>\n</ul>\n<p>通知管理机器人源代码地址：<a href>冷漠无情的机器人</a></p>\n<p>因为源代码中有不少私人数据，所以取消。</p>\n","plink":"https://treeeeeeee.github.io/2019/10/01/基于酷q平台的管理机器人/","type":"post","toc":[{"title":"酷Q机器人","id":"酷Q机器人","index":"1","children":[{"title":"开发以及注意事项","id":"开发以及注意事项","index":"1.1"},{"title":"本人开发流程","id":"本人开发流程","index":"1.2"},{"title":"个人实现效果和功能","id":"个人实现效果和功能","index":"1.3"},{"title":"部署机器人","id":"部署机器人","index":"1.4"},{"title":"用到的库","id":"用到的库","index":"1.5"}]}]},{"title":"啦啦啦啦","author":"Jon","date":"2019-10-02T03:37:46.000Z","_content":"### 提交是否成功","source":"_posts/试第二篇.md","raw":"title: 啦啦啦啦\nauthor: Jon\ndate: 2019-10-02 11:37:46\ntags:\n---\n### 提交是否成功","slug":"试第二篇","published":1,"updated":"2019-10-02T18:05:02.378Z","comments":1,"layout":"post","photos":[],"link":"2019/10/02/试第二篇","_id":"ck19lzc6z0006bv5fo6wo7vxc","content":"<h3 id=\"提交是否成功\">提交是否成功<a href=\"2019/10/02/试第二篇#提交是否成功\"></a></h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"提交是否成功\"><a href=\"#提交是否成功\" class=\"headerlink\" title=\"提交是否成功\"></a>提交是否成功</h3>","plink":"https://treeeeeeee.github.io/2019/10/02/试第二篇/","type":"post"},{"title":"完美的hexo中插入图片的解决方案","date":"2019-10-01T15:13:00.000Z","_content":"\n# 完美的hexo中插入图片的解决方案\n\n以下内容来自ETRD的[《hexo中完美插入本地图片》]([http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/](http://etrd.org/2017/01/23/hexo中完美插入本地图片/))，摘录整理关键部分，留作备份。\n\n### Markdown编辑器\n\n  * **Typora**\n\n    > 不需要关注太多markdown语法就能写出比较好看的markdown，支持实时转换\n\n### Hexo配置文件的设置\n\n 确保你的Hexo的配置文件_config.yml里面有个这个选项配置，并将其置为true\n\n```\npost_asset_folder: true\n```\n\n 这个功能实际上是Hexo官方文档中提到的资源文件夹功能，它的作用在于当你使用\n\n```\nhexo new\n```\n\n生成一篇新文章时，会在\n\n```\n\\source\\_posts\n```\n\n目录下生成一个 文章名.md 文件外，附带生成一个与 文章名 同名的文件夹，可以用它来存放这篇文章的所有资源，比如图片，附件等\n\n[![QQ截图20170123112354](http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/QQ%E6%88%AA%E5%9B%BE20170123112354.png)](http://etrd.org/2017/01/23/hexo中完美插入本地图片/QQ截图20170123112354.png)\n\n实际上我通常喜欢自己右键手动去建立一个md文件来写博客，而不使用hexo new命令，此时要达到同样的效果，我同样也需要手动去建立一个同名的文件夹去存放资源，我试过这样做是可行的，并且这样做虽然有点麻烦，但我似乎发现了它的一个优点，那就是当我的文章中没有图片时，我并不需要这个空的资源文件夹。\n\n有了上面的配置，Hexo在public文件下生成html文件时，会在相应的目录中把那文章对应的资源文件夹中的图片等附件复制过去，例如，这是我生成的一个例子：\n\n[![QQ截图20170123114005](http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/QQ%E6%88%AA%E5%9B%BE20170123114005.png)](http://etrd.org/2017/01/23/hexo中完美插入本地图片/QQ截图20170123114005.png)\n\n### 安装hexo-asset-image插件\n\n你需要安装一个图片路径转换的插件，这个插件名字是**hexo-asset-image**，我目前安装的是最新的0.03版本，使用如下命令安装插件\n\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n\n插件安装完以后，实际上是存放在下面的目录文件夹下\n\n```\n\\blog\\node_modules\\hexo-asset-image\n```\n\n想要卸载这个插件怎么处理，我听说直接删掉这个文件夹，反正我这么试过了。\n\n### md文件的时间标签\n\nhexo-asset-image的原理应该是根据Hexo生成html后以时间的为目录的规则，将我们图片的相对地址转换成了生成后与时间对应目录的绝对地址，因此我认为md文件中应该要有时间标签，一来是为了让Hexo根据md的时间标签来确定文章的新旧排序，如果没有时间标签，Hexo会把md文件的修改时间作为发布时间，这显然是不合理的，再者这个时间标签，我想hexo-asset-image也会引用到，在一篇实际的博文中，我的md文件完整的开头是这样的：\n\n```\n---title: hexo中完美插入本地图片date: 2017-01-23 11:00:55categories: hexo使用tags: - hexo- 本地图片- hexo-asset-image---\n```\n\n### 插入图片\n\n由于每个md文件都有对应的一个资源文件夹，因此，你首先要把需要插入的图片放到这个资源文件夹下，然后进行路径引用，这是上面插入图片时的实际引用代码\n\n```\n![QQ截图20170123114005](/hexo中完美插入本地图片/QQ截图20170123114005.png)\n```\n\n使用Typora又有一个十分方便的地方在于，只需要将图片往这里一拖就插入了，但其实际拖入图片后的插入代码是绝对路径的引用，是这样的\n\n```\n![QQ截图20170123114005](K:\\FangCloudSync\\Github博客源码\\blog\\source\\_posts\\hexo中完美插入本地图片\\QQ截图20170123114005.png)\n```\n\n对比上面的两个代码，我只需要将前面的那段绝对路径删掉~~K:\\FangCloudSync\\Github博客源码\\blog\\source_posts~~ ，然后再将剩余的**两个\\分别换成/** 就可以了\n\n这样子，Typora编辑时同时能够看到插入的图片。\n\n### 生成测试\n\n在很多网友的文章中，这么做就可以了，你可以尝试一下生成并本地测试，看看是否博客的首页及博文的正文页都能够正确显示图片，或者打开博文生成的html源文件，找到图片插入的地方看看src路径是否是对应public后的绝对路径，如下示例这样\n\n```\n<p><img src=\"/2017/01/22/Windows下远程桌面连接树莓派3代/QQ截图20170122163331.png\" alt=\"QQ截图20170122163331\"></p>\n```\n\n如果本地预览主页和博文正文页显示图片都没有问题，并且html源文件内的图片源地址是上面的格式，那你真幸运没有遇到什么麻烦。\n\n### 生成绝对路径不完整的问题\n\n我发现我做了上面的工作后，生成并本地测试查看，图片并不能正确显示，我查看了html文件，它生成的路径是这样的\n\n```\n<p><img src=\"/22/imagetest/500.jpg\" alt=\"500\"></p>\n```\n\n看起来hexo-asset-image的确起了点作用，但似乎有点问题，它生成的绝对路径不完整，仿佛只获取了日，年月没获取到，因为这个md文件的时间是2017-01-22，所以”/2017/01” 似乎没有生成啊，对比上面正确正常的绝对路径，我不明白这是什么原因导致的，也许有可能是我使用的hexo懒人包导致的，Google了一晚上好像就我一个人有这种情况，最后我也在Github上向该插件的作者递交了我遇到的麻烦，但估计等到作者回复不知道是何时了。\n\n今天早上，我受到[自定义修改插件，更便捷的使用七牛空间](http://error408.com/2016/08/02/Hexo七牛图床使用/) 这篇文章的启发，决定自己也尝试修改插件代码试试能否解决。虽然完全不懂js代码，但还是尝试阅读了那段极其简练的代码，这是其中一段：\n\n```\n   var link = data.permalink;var beginPos = getPosition(link, '/', 3) + 1;// In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".var endPos = link.lastIndexOf('/') + 1;   link = link.substring(beginPos, endPos);\n```\n\n可以猜测出来这段点大概是在获取博文生成的绝对路径，然后最后与md文件中的相对路径做一个拼接，但这个函数中\n\n```\nvar beginPos = getPosition(link, '/', 3) + 1;\n```\n\n为什么是寻找第3个’/‘？虽然我不知道，但这样做肯定有作者的意图，只是我不懂其中的原理不理解，不可能这个关键的数字是错的。但我假设如果完整的路径应该是/2017/01/22，那么第3个/似乎正好是日期里面的日，跟我的html生成的不完整的路径点似乎有点关联，因此如果这个数字修改为1，那么是不是就能将/2017/01补上了，试试看吧，然而，幸运的是，成功了！\n\n```\nvar beginPos = getPosition(link, '/', 1) + 1;//just by launcher\n```\n\n### 小结\n\n需要插入本地图片，并让Hexo启用资源文件的功能，每个md文件对应一个资源文件夹，然而这只是方便了资源的管理，插入图片时不推荐使用hexo官方说的不伦不类的标签插入方法，因为编辑md文件时无法预览图片，而需要安装hexo-asset-image插件，这样正常使用markdown语法对图片的相对路径引用，即可实现编辑时可预览图片，且发布时插件自动将相对路径转为绝对路径。如果碰到与我同样的生成的绝对路径不完全的情况，尝试修改插件的js代码，但修改器建议先备份它，我认为我所解决我遇到问题的方法可能是一种巧合，但我暂时先这么使用了，最终的原因和处理方法可能还需要等待Github上该插件作者的官方回应。","source":"_posts/hexo下完美插入图片.md","raw":"title: 完美的hexo中插入图片的解决方案\ntags:\n  - hexo配置\ncategories: 兴趣\ndate: 2019-10-01 23:13:00\n---\n\n# 完美的hexo中插入图片的解决方案\n\n以下内容来自ETRD的[《hexo中完美插入本地图片》]([http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/](http://etrd.org/2017/01/23/hexo中完美插入本地图片/))，摘录整理关键部分，留作备份。\n\n### Markdown编辑器\n\n  * **Typora**\n\n    > 不需要关注太多markdown语法就能写出比较好看的markdown，支持实时转换\n\n### Hexo配置文件的设置\n\n 确保你的Hexo的配置文件_config.yml里面有个这个选项配置，并将其置为true\n\n```\npost_asset_folder: true\n```\n\n 这个功能实际上是Hexo官方文档中提到的资源文件夹功能，它的作用在于当你使用\n\n```\nhexo new\n```\n\n生成一篇新文章时，会在\n\n```\n\\source\\_posts\n```\n\n目录下生成一个 文章名.md 文件外，附带生成一个与 文章名 同名的文件夹，可以用它来存放这篇文章的所有资源，比如图片，附件等\n\n[![QQ截图20170123112354](http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/QQ%E6%88%AA%E5%9B%BE20170123112354.png)](http://etrd.org/2017/01/23/hexo中完美插入本地图片/QQ截图20170123112354.png)\n\n实际上我通常喜欢自己右键手动去建立一个md文件来写博客，而不使用hexo new命令，此时要达到同样的效果，我同样也需要手动去建立一个同名的文件夹去存放资源，我试过这样做是可行的，并且这样做虽然有点麻烦，但我似乎发现了它的一个优点，那就是当我的文章中没有图片时，我并不需要这个空的资源文件夹。\n\n有了上面的配置，Hexo在public文件下生成html文件时，会在相应的目录中把那文章对应的资源文件夹中的图片等附件复制过去，例如，这是我生成的一个例子：\n\n[![QQ截图20170123114005](http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/QQ%E6%88%AA%E5%9B%BE20170123114005.png)](http://etrd.org/2017/01/23/hexo中完美插入本地图片/QQ截图20170123114005.png)\n\n### 安装hexo-asset-image插件\n\n你需要安装一个图片路径转换的插件，这个插件名字是**hexo-asset-image**，我目前安装的是最新的0.03版本，使用如下命令安装插件\n\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n\n插件安装完以后，实际上是存放在下面的目录文件夹下\n\n```\n\\blog\\node_modules\\hexo-asset-image\n```\n\n想要卸载这个插件怎么处理，我听说直接删掉这个文件夹，反正我这么试过了。\n\n### md文件的时间标签\n\nhexo-asset-image的原理应该是根据Hexo生成html后以时间的为目录的规则，将我们图片的相对地址转换成了生成后与时间对应目录的绝对地址，因此我认为md文件中应该要有时间标签，一来是为了让Hexo根据md的时间标签来确定文章的新旧排序，如果没有时间标签，Hexo会把md文件的修改时间作为发布时间，这显然是不合理的，再者这个时间标签，我想hexo-asset-image也会引用到，在一篇实际的博文中，我的md文件完整的开头是这样的：\n\n```\n---title: hexo中完美插入本地图片date: 2017-01-23 11:00:55categories: hexo使用tags: - hexo- 本地图片- hexo-asset-image---\n```\n\n### 插入图片\n\n由于每个md文件都有对应的一个资源文件夹，因此，你首先要把需要插入的图片放到这个资源文件夹下，然后进行路径引用，这是上面插入图片时的实际引用代码\n\n```\n![QQ截图20170123114005](/hexo中完美插入本地图片/QQ截图20170123114005.png)\n```\n\n使用Typora又有一个十分方便的地方在于，只需要将图片往这里一拖就插入了，但其实际拖入图片后的插入代码是绝对路径的引用，是这样的\n\n```\n![QQ截图20170123114005](K:\\FangCloudSync\\Github博客源码\\blog\\source\\_posts\\hexo中完美插入本地图片\\QQ截图20170123114005.png)\n```\n\n对比上面的两个代码，我只需要将前面的那段绝对路径删掉~~K:\\FangCloudSync\\Github博客源码\\blog\\source_posts~~ ，然后再将剩余的**两个\\分别换成/** 就可以了\n\n这样子，Typora编辑时同时能够看到插入的图片。\n\n### 生成测试\n\n在很多网友的文章中，这么做就可以了，你可以尝试一下生成并本地测试，看看是否博客的首页及博文的正文页都能够正确显示图片，或者打开博文生成的html源文件，找到图片插入的地方看看src路径是否是对应public后的绝对路径，如下示例这样\n\n```\n<p><img src=\"/2017/01/22/Windows下远程桌面连接树莓派3代/QQ截图20170122163331.png\" alt=\"QQ截图20170122163331\"></p>\n```\n\n如果本地预览主页和博文正文页显示图片都没有问题，并且html源文件内的图片源地址是上面的格式，那你真幸运没有遇到什么麻烦。\n\n### 生成绝对路径不完整的问题\n\n我发现我做了上面的工作后，生成并本地测试查看，图片并不能正确显示，我查看了html文件，它生成的路径是这样的\n\n```\n<p><img src=\"/22/imagetest/500.jpg\" alt=\"500\"></p>\n```\n\n看起来hexo-asset-image的确起了点作用，但似乎有点问题，它生成的绝对路径不完整，仿佛只获取了日，年月没获取到，因为这个md文件的时间是2017-01-22，所以”/2017/01” 似乎没有生成啊，对比上面正确正常的绝对路径，我不明白这是什么原因导致的，也许有可能是我使用的hexo懒人包导致的，Google了一晚上好像就我一个人有这种情况，最后我也在Github上向该插件的作者递交了我遇到的麻烦，但估计等到作者回复不知道是何时了。\n\n今天早上，我受到[自定义修改插件，更便捷的使用七牛空间](http://error408.com/2016/08/02/Hexo七牛图床使用/) 这篇文章的启发，决定自己也尝试修改插件代码试试能否解决。虽然完全不懂js代码，但还是尝试阅读了那段极其简练的代码，这是其中一段：\n\n```\n   var link = data.permalink;var beginPos = getPosition(link, '/', 3) + 1;// In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".var endPos = link.lastIndexOf('/') + 1;   link = link.substring(beginPos, endPos);\n```\n\n可以猜测出来这段点大概是在获取博文生成的绝对路径，然后最后与md文件中的相对路径做一个拼接，但这个函数中\n\n```\nvar beginPos = getPosition(link, '/', 3) + 1;\n```\n\n为什么是寻找第3个’/‘？虽然我不知道，但这样做肯定有作者的意图，只是我不懂其中的原理不理解，不可能这个关键的数字是错的。但我假设如果完整的路径应该是/2017/01/22，那么第3个/似乎正好是日期里面的日，跟我的html生成的不完整的路径点似乎有点关联，因此如果这个数字修改为1，那么是不是就能将/2017/01补上了，试试看吧，然而，幸运的是，成功了！\n\n```\nvar beginPos = getPosition(link, '/', 1) + 1;//just by launcher\n```\n\n### 小结\n\n需要插入本地图片，并让Hexo启用资源文件的功能，每个md文件对应一个资源文件夹，然而这只是方便了资源的管理，插入图片时不推荐使用hexo官方说的不伦不类的标签插入方法，因为编辑md文件时无法预览图片，而需要安装hexo-asset-image插件，这样正常使用markdown语法对图片的相对路径引用，即可实现编辑时可预览图片，且发布时插件自动将相对路径转为绝对路径。如果碰到与我同样的生成的绝对路径不完全的情况，尝试修改插件的js代码，但修改器建议先备份它，我认为我所解决我遇到问题的方法可能是一种巧合，但我暂时先这么使用了，最终的原因和处理方法可能还需要等待Github上该插件作者的官方回应。","slug":"hexo下完美插入图片","published":1,"updated":"2019-10-02T18:05:02.370Z","comments":1,"layout":"post","photos":[],"link":"2019/10/01/hexo下完美插入图片","_id":"ck19lzc790007bv5f3z31ma04","content":"<h1 id=\"完美的hexo中插入图片的解决方案\">完美的hexo中插入图片的解决方案<a href=\"2019/10/01/hexo下完美插入图片#完美的hexo中插入图片的解决方案\"></a></h1><p>以下内容来自ETRD的<a href=\"[http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/](http://etrd.org/2017/01/23/hexo中完美插入本地图片/)\">《hexo中完美插入本地图片》</a>，摘录整理关键部分，留作备份。</p>\n<h3 id=\"Markdown编辑器\">Markdown编辑器<a href=\"2019/10/01/hexo下完美插入图片#Markdown编辑器\"></a></h3><ul>\n<li><p><strong>Typora</strong></p>\n<blockquote>\n<p>不需要关注太多markdown语法就能写出比较好看的markdown，支持实时转换</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Hexo配置文件的设置\">Hexo配置文件的设置<a href=\"2019/10/01/hexo下完美插入图片#Hexo配置文件的设置\"></a></h3><p> 确保你的Hexo的配置文件_config.yml里面有个这个选项配置，并将其置为true</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></div></figure>\n\n<p> 这个功能实际上是Hexo官方文档中提到的资源文件夹功能，它的作用在于当你使用</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new</span><br></pre></td></tr></table></div></figure>\n\n<p>生成一篇新文章时，会在</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\source\\_posts</span><br></pre></td></tr></table></div></figure>\n\n<p>目录下生成一个 文章名.md 文件外，附带生成一个与 文章名 同名的文件夹，可以用它来存放这篇文章的所有资源，比如图片，附件等</p>\n<p><a href=\"http://etrd.org/2017/01/23/hexo中完美插入本地图片/QQ截图20170123112354.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/QQ%E6%88%AA%E5%9B%BE20170123112354.png\" alt=\"QQ截图20170123112354\"></a></p>\n<p>实际上我通常喜欢自己右键手动去建立一个md文件来写博客，而不使用hexo new命令，此时要达到同样的效果，我同样也需要手动去建立一个同名的文件夹去存放资源，我试过这样做是可行的，并且这样做虽然有点麻烦，但我似乎发现了它的一个优点，那就是当我的文章中没有图片时，我并不需要这个空的资源文件夹。</p>\n<p>有了上面的配置，Hexo在public文件下生成html文件时，会在相应的目录中把那文章对应的资源文件夹中的图片等附件复制过去，例如，这是我生成的一个例子：</p>\n<p><a href=\"http://etrd.org/2017/01/23/hexo中完美插入本地图片/QQ截图20170123114005.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/QQ%E6%88%AA%E5%9B%BE20170123114005.png\" alt=\"QQ截图20170123114005\"></a></p>\n<h3 id=\"安装hexo-asset-image插件\">安装hexo-asset-image插件<a href=\"2019/10/01/hexo下完美插入图片#安装hexo-asset-image插件\"></a></h3><p>你需要安装一个图片路径转换的插件，这个插件名字是<strong>hexo-asset-image</strong>，我目前安装的是最新的0.03版本，使用如下命令安装插件</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></div></figure>\n\n<p>插件安装完以后，实际上是存放在下面的目录文件夹下</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\blog\\node_modules\\hexo-asset-image</span><br></pre></td></tr></table></div></figure>\n\n<p>想要卸载这个插件怎么处理，我听说直接删掉这个文件夹，反正我这么试过了。</p>\n<h3 id=\"md文件的时间标签\">md文件的时间标签<a href=\"2019/10/01/hexo下完美插入图片#md文件的时间标签\"></a></h3><p>hexo-asset-image的原理应该是根据Hexo生成html后以时间的为目录的规则，将我们图片的相对地址转换成了生成后与时间对应目录的绝对地址，因此我认为md文件中应该要有时间标签，一来是为了让Hexo根据md的时间标签来确定文章的新旧排序，如果没有时间标签，Hexo会把md文件的修改时间作为发布时间，这显然是不合理的，再者这个时间标签，我想hexo-asset-image也会引用到，在一篇实际的博文中，我的md文件完整的开头是这样的：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---title: hexo中完美插入本地图片date: 2017-01-23 11:00:55categories: hexo使用tags: - hexo- 本地图片- hexo-asset-image---</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"插入图片\">插入图片<a href=\"2019/10/01/hexo下完美插入图片#插入图片\"></a></h3><p>由于每个md文件都有对应的一个资源文件夹，因此，你首先要把需要插入的图片放到这个资源文件夹下，然后进行路径引用，这是上面插入图片时的实际引用代码</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![QQ截图20170123114005](/hexo中完美插入本地图片/QQ截图20170123114005.png)</span><br></pre></td></tr></table></div></figure>\n\n<p>使用Typora又有一个十分方便的地方在于，只需要将图片往这里一拖就插入了，但其实际拖入图片后的插入代码是绝对路径的引用，是这样的</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![QQ截图20170123114005](K:\\FangCloudSync\\Github博客源码\\blog\\source\\_posts\\hexo中完美插入本地图片\\QQ截图20170123114005.png)</span><br></pre></td></tr></table></div></figure>\n\n<p>对比上面的两个代码，我只需要将前面的那段绝对路径删掉<del>K:\\FangCloudSync\\Github博客源码\\blog\\source_posts</del> ，然后再将剩余的<strong>两个\\分别换成/</strong> 就可以了</p>\n<p>这样子，Typora编辑时同时能够看到插入的图片。</p>\n<h3 id=\"生成测试\">生成测试<a href=\"2019/10/01/hexo下完美插入图片#生成测试\"></a></h3><p>在很多网友的文章中，这么做就可以了，你可以尝试一下生成并本地测试，看看是否博客的首页及博文的正文页都能够正确显示图片，或者打开博文生成的html源文件，找到图片插入的地方看看src路径是否是对应public后的绝对路径，如下示例这样</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&lt;img src=&quot;/2017/01/22/Windows下远程桌面连接树莓派3代/QQ截图20170122163331.png&quot; alt=&quot;QQ截图20170122163331&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>如果本地预览主页和博文正文页显示图片都没有问题，并且html源文件内的图片源地址是上面的格式，那你真幸运没有遇到什么麻烦。</p>\n<h3 id=\"生成绝对路径不完整的问题\">生成绝对路径不完整的问题<a href=\"2019/10/01/hexo下完美插入图片#生成绝对路径不完整的问题\"></a></h3><p>我发现我做了上面的工作后，生成并本地测试查看，图片并不能正确显示，我查看了html文件，它生成的路径是这样的</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&lt;img src=&quot;/22/imagetest/500.jpg&quot; alt=&quot;500&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>看起来hexo-asset-image的确起了点作用，但似乎有点问题，它生成的绝对路径不完整，仿佛只获取了日，年月没获取到，因为这个md文件的时间是2017-01-22，所以”/2017/01” 似乎没有生成啊，对比上面正确正常的绝对路径，我不明白这是什么原因导致的，也许有可能是我使用的hexo懒人包导致的，Google了一晚上好像就我一个人有这种情况，最后我也在Github上向该插件的作者递交了我遇到的麻烦，但估计等到作者回复不知道是何时了。</p>\n<p>今天早上，我受到<a href=\"http://error408.com/2016/08/02/Hexo七牛图床使用/\" target=\"_blank\" rel=\"noopener\">自定义修改插件，更便捷的使用七牛空间</a> 这篇文章的启发，决定自己也尝试修改插件代码试试能否解决。虽然完全不懂js代码，但还是尝试阅读了那段极其简练的代码，这是其中一段：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var link = data.permalink;var beginPos = getPosition(link, &apos;/&apos;, 3) + 1;// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.var endPos = link.lastIndexOf(&apos;/&apos;) + 1;   link = link.substring(beginPos, endPos);</span><br></pre></td></tr></table></div></figure>\n\n<p>可以猜测出来这段点大概是在获取博文生成的绝对路径，然后最后与md文件中的相对路径做一个拼接，但这个函数中</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var beginPos = getPosition(link, &apos;/&apos;, 3) + 1;</span><br></pre></td></tr></table></div></figure>\n\n<p>为什么是寻找第3个’/‘？虽然我不知道，但这样做肯定有作者的意图，只是我不懂其中的原理不理解，不可能这个关键的数字是错的。但我假设如果完整的路径应该是/2017/01/22，那么第3个/似乎正好是日期里面的日，跟我的html生成的不完整的路径点似乎有点关联，因此如果这个数字修改为1，那么是不是就能将/2017/01补上了，试试看吧，然而，幸运的是，成功了！</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var beginPos = getPosition(link, &apos;/&apos;, 1) + 1;//just by launcher</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"小结\">小结<a href=\"2019/10/01/hexo下完美插入图片#小结\"></a></h3><p>需要插入本地图片，并让Hexo启用资源文件的功能，每个md文件对应一个资源文件夹，然而这只是方便了资源的管理，插入图片时不推荐使用hexo官方说的不伦不类的标签插入方法，因为编辑md文件时无法预览图片，而需要安装hexo-asset-image插件，这样正常使用markdown语法对图片的相对路径引用，即可实现编辑时可预览图片，且发布时插件自动将相对路径转为绝对路径。如果碰到与我同样的生成的绝对路径不完全的情况，尝试修改插件的js代码，但修改器建议先备份它，我认为我所解决我遇到问题的方法可能是一种巧合，但我暂时先这么使用了，最终的原因和处理方法可能还需要等待Github上该插件作者的官方回应。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"完美的hexo中插入图片的解决方案\"><a href=\"#完美的hexo中插入图片的解决方案\" class=\"headerlink\" title=\"完美的hexo中插入图片的解决方案\"></a>完美的hexo中插入图片的解决方案</h1><p>以下内容来自ETRD的<a href=\"[http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/](http://etrd.org/2017/01/23/hexo中完美插入本地图片/)\">《hexo中完美插入本地图片》</a>，摘录整理关键部分，留作备份。</p>\n<h3 id=\"Markdown编辑器\"><a href=\"#Markdown编辑器\" class=\"headerlink\" title=\"Markdown编辑器\"></a>Markdown编辑器</h3><ul>\n<li><p><strong>Typora</strong></p>\n<blockquote>\n<p>不需要关注太多markdown语法就能写出比较好看的markdown，支持实时转换</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Hexo配置文件的设置\"><a href=\"#Hexo配置文件的设置\" class=\"headerlink\" title=\"Hexo配置文件的设置\"></a>Hexo配置文件的设置</h3><p> 确保你的Hexo的配置文件_config.yml里面有个这个选项配置，并将其置为true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure>\n\n<p> 这个功能实际上是Hexo官方文档中提到的资源文件夹功能，它的作用在于当你使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new</span><br></pre></td></tr></table></figure>\n\n<p>生成一篇新文章时，会在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\source\\_posts</span><br></pre></td></tr></table></figure>\n\n<p>目录下生成一个 文章名.md 文件外，附带生成一个与 文章名 同名的文件夹，可以用它来存放这篇文章的所有资源，比如图片，附件等</p>\n<p><a href=\"http://etrd.org/2017/01/23/hexo中完美插入本地图片/QQ截图20170123112354.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/QQ%E6%88%AA%E5%9B%BE20170123112354.png\" alt=\"QQ截图20170123112354\"></a></p>\n<p>实际上我通常喜欢自己右键手动去建立一个md文件来写博客，而不使用hexo new命令，此时要达到同样的效果，我同样也需要手动去建立一个同名的文件夹去存放资源，我试过这样做是可行的，并且这样做虽然有点麻烦，但我似乎发现了它的一个优点，那就是当我的文章中没有图片时，我并不需要这个空的资源文件夹。</p>\n<p>有了上面的配置，Hexo在public文件下生成html文件时，会在相应的目录中把那文章对应的资源文件夹中的图片等附件复制过去，例如，这是我生成的一个例子：</p>\n<p><a href=\"http://etrd.org/2017/01/23/hexo中完美插入本地图片/QQ截图20170123114005.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/QQ%E6%88%AA%E5%9B%BE20170123114005.png\" alt=\"QQ截图20170123114005\"></a></p>\n<h3 id=\"安装hexo-asset-image插件\"><a href=\"#安装hexo-asset-image插件\" class=\"headerlink\" title=\"安装hexo-asset-image插件\"></a>安装hexo-asset-image插件</h3><p>你需要安装一个图片路径转换的插件，这个插件名字是<strong>hexo-asset-image</strong>，我目前安装的是最新的0.03版本，使用如下命令安装插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n\n<p>插件安装完以后，实际上是存放在下面的目录文件夹下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\blog\\node_modules\\hexo-asset-image</span><br></pre></td></tr></table></figure>\n\n<p>想要卸载这个插件怎么处理，我听说直接删掉这个文件夹，反正我这么试过了。</p>\n<h3 id=\"md文件的时间标签\"><a href=\"#md文件的时间标签\" class=\"headerlink\" title=\"md文件的时间标签\"></a>md文件的时间标签</h3><p>hexo-asset-image的原理应该是根据Hexo生成html后以时间的为目录的规则，将我们图片的相对地址转换成了生成后与时间对应目录的绝对地址，因此我认为md文件中应该要有时间标签，一来是为了让Hexo根据md的时间标签来确定文章的新旧排序，如果没有时间标签，Hexo会把md文件的修改时间作为发布时间，这显然是不合理的，再者这个时间标签，我想hexo-asset-image也会引用到，在一篇实际的博文中，我的md文件完整的开头是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---title: hexo中完美插入本地图片date: 2017-01-23 11:00:55categories: hexo使用tags: - hexo- 本地图片- hexo-asset-image---</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><p>由于每个md文件都有对应的一个资源文件夹，因此，你首先要把需要插入的图片放到这个资源文件夹下，然后进行路径引用，这是上面插入图片时的实际引用代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![QQ截图20170123114005](/hexo中完美插入本地图片/QQ截图20170123114005.png)</span><br></pre></td></tr></table></figure>\n\n<p>使用Typora又有一个十分方便的地方在于，只需要将图片往这里一拖就插入了，但其实际拖入图片后的插入代码是绝对路径的引用，是这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![QQ截图20170123114005](K:\\FangCloudSync\\Github博客源码\\blog\\source\\_posts\\hexo中完美插入本地图片\\QQ截图20170123114005.png)</span><br></pre></td></tr></table></figure>\n\n<p>对比上面的两个代码，我只需要将前面的那段绝对路径删掉<del>K:\\FangCloudSync\\Github博客源码\\blog\\source_posts</del> ，然后再将剩余的<strong>两个\\分别换成/</strong> 就可以了</p>\n<p>这样子，Typora编辑时同时能够看到插入的图片。</p>\n<h3 id=\"生成测试\"><a href=\"#生成测试\" class=\"headerlink\" title=\"生成测试\"></a>生成测试</h3><p>在很多网友的文章中，这么做就可以了，你可以尝试一下生成并本地测试，看看是否博客的首页及博文的正文页都能够正确显示图片，或者打开博文生成的html源文件，找到图片插入的地方看看src路径是否是对应public后的绝对路径，如下示例这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&lt;img src=&quot;/2017/01/22/Windows下远程桌面连接树莓派3代/QQ截图20170122163331.png&quot; alt=&quot;QQ截图20170122163331&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果本地预览主页和博文正文页显示图片都没有问题，并且html源文件内的图片源地址是上面的格式，那你真幸运没有遇到什么麻烦。</p>\n<h3 id=\"生成绝对路径不完整的问题\"><a href=\"#生成绝对路径不完整的问题\" class=\"headerlink\" title=\"生成绝对路径不完整的问题\"></a>生成绝对路径不完整的问题</h3><p>我发现我做了上面的工作后，生成并本地测试查看，图片并不能正确显示，我查看了html文件，它生成的路径是这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&lt;img src=&quot;/22/imagetest/500.jpg&quot; alt=&quot;500&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p>看起来hexo-asset-image的确起了点作用，但似乎有点问题，它生成的绝对路径不完整，仿佛只获取了日，年月没获取到，因为这个md文件的时间是2017-01-22，所以”/2017/01” 似乎没有生成啊，对比上面正确正常的绝对路径，我不明白这是什么原因导致的，也许有可能是我使用的hexo懒人包导致的，Google了一晚上好像就我一个人有这种情况，最后我也在Github上向该插件的作者递交了我遇到的麻烦，但估计等到作者回复不知道是何时了。</p>\n<p>今天早上，我受到<a href=\"http://error408.com/2016/08/02/Hexo七牛图床使用/\" target=\"_blank\" rel=\"noopener\">自定义修改插件，更便捷的使用七牛空间</a> 这篇文章的启发，决定自己也尝试修改插件代码试试能否解决。虽然完全不懂js代码，但还是尝试阅读了那段极其简练的代码，这是其中一段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var link = data.permalink;var beginPos = getPosition(link, &apos;/&apos;, 3) + 1;// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.var endPos = link.lastIndexOf(&apos;/&apos;) + 1;   link = link.substring(beginPos, endPos);</span><br></pre></td></tr></table></figure>\n\n<p>可以猜测出来这段点大概是在获取博文生成的绝对路径，然后最后与md文件中的相对路径做一个拼接，但这个函数中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var beginPos = getPosition(link, &apos;/&apos;, 3) + 1;</span><br></pre></td></tr></table></figure>\n\n<p>为什么是寻找第3个’/‘？虽然我不知道，但这样做肯定有作者的意图，只是我不懂其中的原理不理解，不可能这个关键的数字是错的。但我假设如果完整的路径应该是/2017/01/22，那么第3个/似乎正好是日期里面的日，跟我的html生成的不完整的路径点似乎有点关联，因此如果这个数字修改为1，那么是不是就能将/2017/01补上了，试试看吧，然而，幸运的是，成功了！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var beginPos = getPosition(link, &apos;/&apos;, 1) + 1;//just by launcher</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>需要插入本地图片，并让Hexo启用资源文件的功能，每个md文件对应一个资源文件夹，然而这只是方便了资源的管理，插入图片时不推荐使用hexo官方说的不伦不类的标签插入方法，因为编辑md文件时无法预览图片，而需要安装hexo-asset-image插件，这样正常使用markdown语法对图片的相对路径引用，即可实现编辑时可预览图片，且发布时插件自动将相对路径转为绝对路径。如果碰到与我同样的生成的绝对路径不完全的情况，尝试修改插件的js代码，但修改器建议先备份它，我认为我所解决我遇到问题的方法可能是一种巧合，但我暂时先这么使用了，最终的原因和处理方法可能还需要等待Github上该插件作者的官方回应。</p>\n","plink":"https://treeeeeeee.github.io/2019/10/01/hexo下完美插入图片/","type":"post","toc":[{"title":"完美的hexo中插入图片的解决方案","id":"完美的hexo中插入图片的解决方案","index":"1"}]},{"title":"linux服务器测试","author":"Jon","date":"2019-10-02T18:10:14.000Z","_content":"## 是否提交成功","source":"_posts/linux服务器测试.md","raw":"title: linux服务器测试\nauthor: Jon\ndate: 2019-10-03 02:10:14\ntags:\n---\n## 是否提交成功","slug":"linux服务器测试","published":1,"updated":"2019-10-02T18:59:54.561Z","comments":1,"layout":"post","photos":[],"link":"2019/10/03/linux服务器测试","_id":"ck19my0wh00002l5f8bu6xdrf","content":"<h2 id=\"是否提交成功\">是否提交成功<a href=\"2019/10/03/linux服务器测试#是否提交成功\"></a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"是否提交成功\"><a href=\"#是否提交成功\" class=\"headerlink\" title=\"是否提交成功\"></a>是否提交成功</h2>","plink":"https://treeeeeeee.github.io/2019/10/03/linux服务器测试/","type":"post","toc":[{"title":"是否提交成功","id":"是否提交成功","index":"1"}]}],"PostAsset":[{"_id":"source/_posts/基于酷q平台的管理机器人/补登请假.jpg","slug":"补登请假.jpg","post":"ck19lzc6h0001bv5fw3svxcsz","modified":0,"renderable":0},{"_id":"source/_posts/基于酷q平台的管理机器人/导包.png","slug":"导包.png","post":"ck19lzc6h0001bv5fw3svxcsz","modified":0,"renderable":0},{"_id":"source/_posts/基于酷q平台的管理机器人/idea新建项目.png","slug":"idea新建项目.png","post":"ck19lzc6h0001bv5fw3svxcsz","modified":0,"renderable":0},{"_id":"source/_posts/基于酷q平台的管理机器人/请假.jpg","slug":"请假.jpg","post":"ck19lzc6h0001bv5fw3svxcsz","modified":0,"renderable":0},{"_id":"source/_posts/基于酷q平台的管理机器人/请假文档.jpg","slug":"请假文档.jpg","post":"ck19lzc6h0001bv5fw3svxcsz","modified":0,"renderable":0},{"_id":"source/_posts/基于酷q平台的管理机器人/通知.jpg","slug":"通知.jpg","post":"ck19lzc6h0001bv5fw3svxcsz","modified":0,"renderable":0},{"_id":"source/_posts/基于酷q平台的管理机器人/酷q配置坏境的注意事项.jpg","slug":"酷q配置坏境的注意事项.jpg","post":"ck19lzc6h0001bv5fw3svxcsz","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck19lzc6h0001bv5fw3svxcsz","category_id":"ck19lzc6l0002bv5fug5km90w","_id":"ck19lzc6p0005bv5fvzju6g2q"},{"post_id":"ck19lzc790007bv5f3z31ma04","category_id":"ck19lzc6l0002bv5fug5km90w","_id":"ck19lzc7b0009bv5fuqs2s73c"}],"PostTag":[{"post_id":"ck19lzc6h0001bv5fw3svxcsz","tag_id":"ck19lzc6m0003bv5fcc7f7jo7","_id":"ck19lzc6o0004bv5frnk2f8ia"},{"post_id":"ck19lzc790007bv5f3z31ma04","tag_id":"ck19lzc7b0008bv5fd9y8469b","_id":"ck19lzc7c000abv5f9r87fxjh"}],"Tag":[{"name":"世界这么大，当然要多去看看","_id":"ck19lzc6m0003bv5fcc7f7jo7"},{"name":"hexo配置","_id":"ck19lzc7b0008bv5fd9y8469b"}]}}