{"title":"类加载和类加载器","date":"2020-04-01T05:06:43.000Z","link":"2020/04/01/类加载和类加载器","comments":true,"tags":["干货"],"categories":["Java"],"updated":"2020-04-02T16:14:37.851Z","content":"<h2 id=\"类加载流程\">类加载流程<a href=\"2020/04/01/类加载和类加载器#类加载流程\"></a></h2><p><strong>链接和加载时并行的，没有谁先再后的先后顺序，涉及到源码中对链接的方法的调用</strong></p>\n<h3 id=\"加载\">加载<a href=\"2020/04/01/类加载和类加载器#加载\"></a></h3><p>”加载“是”类加机制”的第一个过程，在加载阶段，虚拟机主要完成三件事：</p>\n<ul>\n<li>通过一个类的全限定名来获取其定义的二进制字节流</li>\n<li>将这个字节流所代表的的<strong>静态存储结构</strong>转化为<strong>方法区</strong>中的<strong>运行时数据结构</strong>（初始化）</li>\n<li>在<strong>堆</strong>中生成一个代表这个类的Class对象，作为<strong>方法区</strong>中这些数据的访问入口。</li>\n</ul>\n<p>至于JVM的内存管理和分区结构大致是以下</p>\n<p>相对于类加载的其他阶段而言，加载阶段是<strong>可控性最强</strong>的阶段，因为程序员可以使用系统的类加载器加载，还可以使用自己的类加载器加载（从网络，本地，或者任意地方加载字节码文件）。</p>\n<p><strong>类加载器的作用就是上面虚拟机需要完成的三件事，我们定义的类加载器也是一样</strong></p>\n<h3 id=\"链接\">链接<a href=\"2020/04/01/类加载和类加载器#链接\"></a></h3><ul>\n<li><p>验证</p>\n<p>保证格式正确，符合java语法规范，不会对<code>jvm</code>造成危害</p>\n<ul>\n<li>文件格式验证，是否符合class文件的格式的规范</li>\n<li><strong>元数据</strong>验证，对字节码描述的信息进行语义分析，以保证其描述的信息符合java语言规范的要求</li>\n<li>字节码验证，通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</li>\n<li>符号引用验证，发生在<strong>虚拟机将符号引用转化为直接引用</strong>的时候。主要是对类自身以外的信息进行校验。目的是<strong>确保解析动作能够完成</strong>。</li>\n</ul>\n</li>\n<li><p>准备</p>\n<p>准备类变量（静态变量），赋默认值</p>\n</li>\n<li><p>解析</p>\n<p>解析阶段主要是虚拟机将常量池中的符号引用转化为直接引用的过程。什么是符号应用和直接引用呢？</p>\n<ul>\n<li><p>符号引用：</p>\n<p>以一组符号来描述所引用的目标，可以是任何形式的字面量，只要是能无歧义的定位到目标就好，就好比在班级中，老师可以用张三来代表你，也可以用你的学号来代表你，但无论任何方式这些都只是一个代号（符号），这个代号指向你（符号引用）</p>\n</li>\n<li><p>直接引用：</p>\n<p>是可以指向目标的<strong>指针</strong>、<strong>相对偏移量</strong>或者是<strong>一个能直接或间接定位到目标的句柄</strong>。和虚拟机实现的内存有关，不同的虚拟机直接引用一般不同。解析动作主要针对<strong>类或接口</strong>、<strong>字段</strong>、<strong>类方法</strong>、<strong>接口方法</strong>、<strong>方法类型</strong>、<strong>方法句柄</strong>和<strong>调用点限定符</strong>7类符号引用进行。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"初始化\">初始化<a href=\"2020/04/01/类加载和类加载器#初始化\"></a></h3><p>执行类构造器<cinit></cinit></p>\n<ul>\n<li><p>有父类，但是父类还没有被初始化先执行父类的初始化</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Animal\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"People\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        People people = <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 输出：</span><br><span class=\"line\">&gt; Animal</span><br><span class=\"line\">&gt; People</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n</li>\n<li><p>同一个命名空间只会初始化一次</p>\n<blockquote>\n<p>类加载器的<strong>命名空间</strong>是由类加载器<strong>本身以及所有父加载器</strong>所加载出来的<code>binary name</code>(<code>full class name</code>)组成.</p>\n<ul>\n<li>在同一个命名空间里，不允许出现二个完全-样的<code>binary name</code>。</li>\n<li>在不同的命名空间种，可以出现二个相同的<code>binary name</code>。当时二者对应的Class对象是相互不能感知到的，也就是说Class对象的类型是不一样的。</li>\n<li>子加载器的命名空间中的binary name对应的类中可以访问父加载器命名空间中<code>binary name</code>对应的类，反之不行</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"两个重要的init方法\">两个重要的init方法<a href=\"2020/04/01/类加载和类加载器#两个重要的init方法\"></a></h3><h4 id=\"init\">init<a href=\"2020/04/01/类加载和类加载器#init\"></a></h4><p>是instance实例构造器，对非静态变量解析初始化</p>\n<h4 id=\"clinit\"><strong>clinit</strong><a href=\"2020/04/01/类加载和类加载器#clinit\"></a></h4><p>是class类构造器对静态变量，静态代码块进行初始化</p>\n<p>方法是由编译器<strong>自动收集类中的所有类变量的赋值动作和静态语句块</strong>（static{}块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，</p>\n<p>静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但是不可以使用，会报非法前置引用的错误。</p>\n<p>例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    a = <span class=\"number\">0</span>;<span class=\"comment\">//可以，因为在链接中的准备阶段就已经准备好了这个变量，这里相当于重新赋值</span></span><br><span class=\"line\">    System.out.println(a);<span class=\"comment\">//不可以，会被提示非法前置引用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;<span class=\"comment\">//真正对程序员所期望的初始值进行初始化</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"相关例子\">相关例子<a href=\"2020/04/01/类加载和类加载器#相关例子\"></a></h3><h4 id=\"经典面试题\">经典面试题<a href=\"2020/04/01/类加载和类加载器#经典面试题\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Person instance = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Person()&#123;</span><br><span class=\"line\">        a++;</span><br><span class=\"line\">        b++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Person person = Person.instance;</span><br><span class=\"line\">        System.out.println(Person.a);</span><br><span class=\"line\">        System.out.println(Person.b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">************************************</span><br><span class=\"line\">输出：</span><br><span class=\"line\">    <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"number\">1</span></span><br><span class=\"line\">************************************</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*  将Person类中的</span></span><br><span class=\"line\"><span class=\"comment\">*  static Person instance = new Person();</span></span><br><span class=\"line\"><span class=\"comment\">*  提到最前面</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Person instance = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Person()&#123;</span><br><span class=\"line\">        a++;</span><br><span class=\"line\">        b++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Person person = Person.instance;</span><br><span class=\"line\">        System.out.println(Person.a);</span><br><span class=\"line\">        System.out.println(Person.b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">************************************</span><br><span class=\"line\">输出：</span><br><span class=\"line\">    <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"number\">0</span></span><br><span class=\"line\">************************************</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>原因：</strong></p>\n<p>原因在准备</p>\n<h2 id=\"类加载器\">类加载器<a href=\"2020/04/01/类加载和类加载器#类加载器\"></a></h2><ul>\n<li><p><code>BootstrapClassLoader</code></p>\n<p>由C实现</p>\n</li>\n<li><p><code>ExtensionClassLoader</code></p>\n<p>由java实现，继承于<code>ClassLoader</code></p>\n</li>\n<li><p><code>ApplicationClassLoader</code></p>\n<p>由java实现，继承于<code>ClassLoader</code></p>\n</li>\n<li><p>自定义加载器</p>\n<p>必须继承<code>ClassLoader</code>，默认父加载器为<code>ApplicationClassLoader</code>，可通过重写构造器自定义父加载器</p>\n<p>源码中给出的Demo</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassLoader</span> </span>&#123;</span><br><span class=\"line\">    String host;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> port;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Class <span class=\"title\">findClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] b = loadClassData(name);</span><br><span class=\"line\">\t\t<span class=\"comment\">//defineClass最终调用native方法，返回一个Class对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> defineClass(name, b, <span class=\"number\">0</span>, b.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] loadClassData(String name) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// load the class data from the connection</span></span><br><span class=\"line\">        <span class=\"comment\">//加载字节码并返回一个but数组，来源不限，可以是网络、本地或者专有数据库中的class文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ul>\n<p><strong>注意：有层级关系，相互没有继承关系</strong></p>\n<h3 id=\"双亲委派模型\">双亲委派模型<a href=\"2020/04/01/类加载和类加载器#双亲委派模型\"></a></h3><p>简单来说，一个类似于“android中的事件分发的流程”</p>\n<p>加载类时依次向上层层调用，请求上层查找并加载，若上层不能查找或者加载到，自己加载或者查找</p>\n<p><code>java.lang.ClassLoader.java</code>加载类关键代码</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>.getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = <span class=\"keyword\">this</span>.findLoadedClass(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> t0 = System.nanoTime();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断父加载器是否为空</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//有，则优先调用父加载器的loadClass加载方法，层层调用</span></span><br><span class=\"line\">                    <span class=\"comment\">//上面一层的也会这样要父加载器加载</span></span><br><span class=\"line\">                    c = <span class=\"keyword\">this</span>.parent.loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//父加载器为空，则使用启动类加载器来加载</span></span><br><span class=\"line\">                    c = <span class=\"keyword\">this</span>.findBootstrapClassOrNull(name);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException var10) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//判断c是否为空</span></span><br><span class=\"line\">            <span class=\"comment\">//为空？表示当前类加载器的所有上层加载器都不能找到或者加载此类</span></span><br><span class=\"line\">            <span class=\"comment\">//不为空？表示当前类加载器的某个上层加载器已经找到或者加载此类，并返回了Class对象</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\">                c = <span class=\"keyword\">this</span>.findClass(name);</span><br><span class=\"line\">                PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.resolveClass(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"优点\">优点<a href=\"2020/04/01/类加载和类加载器#优点\"></a></h3><ul>\n<li><p>避免类的重复加载</p>\n</li>\n<li><p>保护程序安全，防止核心API随意篡改</p>\n<blockquote>\n<p>如何保护？例如：自定义类:java.lang. String</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">package</span> java.lang;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span> </span>&#123;</span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">&gt;         System.out.println(<span class=\"string\">\"假的String里面\"</span>);</span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<blockquote>\n<p>自己建一个全类名跟String一样的类，如果这个类在java中的String类之前被加载，那么Java Api中的String会被我这个String替换，并且不再加载java自己的String。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"加载时机\">加载时机<a href=\"2020/04/01/类加载和类加载器#加载时机\"></a></h2><h3 id=\"必须要有类去主动使用该-Class。\">必须要有类去主动使用该 Class。<a href=\"2020/04/01/类加载和类加载器#必须要有类去主动使用该-Class。\"></a></h3><ul>\n<li>使用 new 关键字、反射、克隆、反序列化；</li>\n<li>调用类的静态方法</li>\n<li>调用一个类的子类的时候会初始化其父类</li>\n<li>包含 main() 方法的类（相当于第二条）。</li>\n</ul>\n<h3 id=\"被动使用则不会去装载-Class。\">被动使用则不会去装载 Class。<a href=\"2020/04/01/类加载和类加载器#被动使用则不会去装载-Class。\"></a></h3><ul>\n<li><p>调用了其父类的静态方法</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Animal\"</span>);<span class=\"comment\">//类被初始化会打印Animal</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"getIntValue\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"People\"</span>);<span class=\"comment\">//类被初始化会打印People</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(People.getValue());<span class=\"comment\">//调用People类的getValue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出：</span><br><span class=\"line\">  Animal</span><br><span class=\"line\">  getIntValue</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">  表明`getValue()`这个静态成员是Animal的就一定是Animal的，其实`People.getValue()`就等价于`Animal.getValue()`</span><br><span class=\"line\"></span><br><span class=\"line\">## 只加载不初始化</span><br><span class=\"line\"></span><br><span class=\"line\">​```java</span><br><span class=\"line\">public class People extends Animal &#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(&quot;PeopleLoad&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        Class mClass = classLoader.loadClass(<span class=\"string\">\"People\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出：</span><br><span class=\"line\">People</span><br></pre></td></tr></table></div></figure>\n\n<p>静态代码块没有执行，说明此时<cinit>方法还没有被调用，说明只加载没有初始化，原因在哪？</cinit></p>\n<p><code>java.lang.ClassLoader#loadClass(java.lang.String, boolean)</code>，这个方法的第二个参数，就是控制链接的默认调用<code>loadClass</code>传入的时false，如果传入true最后会调用native方法进行链接</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Class&lt;?&gt; loadClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"既加载又初始化\">既加载又初始化<a href=\"2020/04/01/类加载和类加载器#既加载又初始化\"></a></h2><p>上面举了很多例子，我们看一个关键的</p>\n<p>还是下面这一些代码</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"PeopleLoad\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        Class.forName(<span class=\"string\">\"People\"</span>, <span class=\"keyword\">true</span>, classLoader);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出：</span><br><span class=\"line\">PeopleLoad</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"JVM-内存管理和垃圾回收","link":"2020/04/01/JVM-内存管理和垃圾回收"},"next":{"title":"当Activity异常销毁FragmentManager做了什么","link":"2020/03/27/当Activity异常销毁FragmentManager做了什么"},"plink":"https://treeeeeeee.github.io/2020/04/01/类加载和类加载器/","toc":[{"title":"类加载流程","id":"类加载流程","index":"1","children":[{"title":"加载","id":"加载","index":"1.1"},{"title":"链接","id":"链接","index":"1.2"},{"title":"初始化","id":"初始化","index":"1.3"},{"title":"两个重要的init方法","id":"两个重要的init方法","index":"1.4","children":[{"title":"init","id":"init","index":"1.4.1"},{"title":"<strong>clinit</strong>","id":"clinit","index":"1.4.2"}]},{"title":"相关例子","id":"相关例子","index":"1.5","children":[{"title":"经典面试题","id":"经典面试题","index":"1.5.1"}]}]},{"title":"类加载器","id":"类加载器","index":"2","children":[{"title":"双亲委派模型","id":"双亲委派模型","index":"2.1"},{"title":"优点","id":"优点","index":"2.2"}]},{"title":"加载时机","id":"加载时机","index":"3","children":[{"title":"必须要有类去主动使用该 Class。","id":"必须要有类去主动使用该-Class。","index":"3.1"},{"title":"被动使用则不会去装载 Class。","id":"被动使用则不会去装载-Class。","index":"3.2"}]},{"title":"既加载又初始化","id":"既加载又初始化","index":"4"}]}