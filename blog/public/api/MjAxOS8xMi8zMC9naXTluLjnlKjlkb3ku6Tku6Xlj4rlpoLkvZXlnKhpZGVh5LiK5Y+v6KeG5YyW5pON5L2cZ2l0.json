{"title":"git常用命令以及如何在idea上可视化操作git","date":"2019-12-30T03:23:44.000Z","link":"2019/12/30/git常用命令以及如何在idea上可视化操作git","comments":true,"tags":["git常用命令备份"],"categories":["git"],"updated":"2019-12-30T03:27:26.359Z","content":"<h1 id=\"git\">git<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#git\"></a></h1><p>链接在手，天下你有，自己去详细学习吧：<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\"> 史上最浅显易懂的Git教程！ </a></p>\n<h2 id=\"概念\">概念<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#概念\"></a></h2><h3 id=\"工作区（Working-Directory）\">工作区（Working Directory）<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#工作区（Working-Directory）\"></a></h3><p>是我们直接编辑的地方，例如 idea 打开的项目，记事本打开的文本等，肉眼可见，直接操作。</p>\n<h3 id=\"暂存区（Stage-或-Index）\">暂存区（Stage 或 Index）<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#暂存区（Stage-或-Index）\"></a></h3><p>数据暂时存放的区域，可在工作区和版本库之间进行数据的友好交流。</p>\n<h3 id=\"版本库（commit-History）\">版本库（commit History）<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#版本库（commit-History）\"></a></h3><p>存放已经提交的数据，push 的时候，就是把这个区的数据 push 到远程仓库了。</p>\n<p><img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/2429e4d2661e60027537aea0077f6e40.png\" alt=\"git 数据流程图示意图\" class=\"article-img\"></p>\n<h2 id=\"常用命令讲解\">常用命令讲解<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#常用命令讲解\"></a></h2><h3 id=\"Git-常用命令汇总\">Git 常用命令汇总<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#Git-常用命令汇总\"></a></h3><h4 id=\"1、远程仓库相关命令\">1、远程仓库相关命令<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#1、远程仓库相关命令\"></a></h4><ul>\n<li>检出仓库：$ git clone [remoteName]</li>\n<li>查看远程仓库：$ git remote -v</li>\n<li>添加远程仓库：$ git remote add [name] [url]</li>\n<li>删除远程仓库：$ git rm [name]</li>\n<li>修改远程仓库：$ git remote set-url –push [name] [newUrl]</li>\n<li>拉取远程仓库：$ git pull [remoteName] [localBranchName]</li>\n<li>推送远程仓库：$ git push [remoteName] [localBranchName]</li>\n</ul>\n<p><em>如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</em></p>\n<ul>\n<li>$ git push origin test:master         // 提交本地test分支作为远程的master分支</li>\n<li>$git push origin test:test              // 提交本地test分支作为远程的test分支</li>\n</ul>\n<h4 id=\"2、分支-branch-操作相关命令\">2、分支(branch)操作相关命令<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#2、分支-branch-操作相关命令\"></a></h4><ul>\n<li><p>查看本地分支：$ git branch</p>\n</li>\n<li><p>查看远程分支：$ git branch -r</p>\n</li>\n<li><p>创建本地分支：$ git branch [name] —-注意新分支创建后不会自动切换为当前分支</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch test</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>切换分支：$ git checkout [name]</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout test</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>创建新分支并立即切换到新分支：$ git checkout -b [name]</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b test</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>删除分支：$ git branch -d [name] —- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">or</span></span><br><span class=\"line\"></span><br><span class=\"line\">git branch -D test</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>合并分支：$ git merge [name] —-将名称为[name]的分支与当前分支合并</p>\n</li>\n<li><p>创建远程分支(本地分支push到远程)：$ git push origin [name]</p>\n</li>\n<li><p>删除远程分支：$ git push origin :heads/[name] 或 $ git push origin :[name]</p>\n</li>\n<li><p><em>创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</em></p>\n</li>\n<li><p>$git symbolic-ref HEAD refs/heads/[name]</p>\n</li>\n<li><p>$rm .git/index</p>\n</li>\n<li><p>$git clean -fdx</p>\n</li>\n</ul>\n<h4 id=\"3、版本-tag-操作相关命令\">3、版本(tag)操作相关命令<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#3、版本-tag-操作相关命令\"></a></h4><ul>\n<li>查看版本：$ git tag</li>\n<li>创建版本：$ git tag [name]</li>\n<li>删除版本：$ git tag -d [name]</li>\n<li>查看远程版本：$ git tag -r</li>\n<li>创建远程版本(本地版本push到远程)：$ git push origin [name]</li>\n<li>删除远程版本：$ git push origin :refs/tags/[name]</li>\n<li>合并远程仓库的tag到本地：$ git pull origin –tags</li>\n<li>上传本地tag到远程仓库：$ git push origin –tags</li>\n<li>创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’</li>\n</ul>\n<h4 id=\"4、忽略一些文件、文件夹不提交\">4、忽略一些文件、文件夹不提交<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#4、忽略一些文件、文件夹不提交\"></a></h4><p><a href=\"https://jontree.github.io/2019/10/04/gitignore%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E6%80%BB%E7%BB%93\" target=\"_blank\" rel=\"noopener\">.gitignore文件详解</a></p>\n<h3 id=\"附页：-Git-常用命令速查\">附页： Git 常用命令速查<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#附页：-Git-常用命令速查\"></a></h3><ul>\n<li>git branch 查看本地所有分支</li>\n<li>git status 查看当前状态</li>\n<li>git commit 提交</li>\n<li>git branch -a 查看所有的分支</li>\n<li>git branch -r 查看远程所有分支</li>\n<li>git commit -am “init” 提交并且加注释</li>\n<li>git remote add origin <a href=\"mailto:git@192.168.1.119\" target=\"_blank\" rel=\"noopener\">git@192.168.1.119</a>:ndshow</li>\n<li>git push origin master 将文件给推到服务器上</li>\n<li>git remote show origin 显示远程库origin里的资源</li>\n<li>git push origin master:develop</li>\n<li>git push origin master:hb-dev 将本地库与服务器上的库进行关联</li>\n<li>git checkout –track origin/dev 切换到远程dev分支</li>\n<li>git branch -D master develop 删除本地库develop</li>\n<li>git checkout -b dev 建立一个新的本地分支dev</li>\n<li>git merge origin/dev 将分支dev与当前分支进行合并</li>\n<li>git checkout dev 切换到本地dev分支</li>\n<li>git remote show 查看远程库</li>\n<li>git add .</li>\n<li>git rm 文件名(包括路径) 从git中删除指定文件</li>\n<li>git clone git://github.com/schacon/grit.git从服务器上将代码给拉下来</li>\n<li>git config –list 看所有用户</li>\n<li>git ls-files 看已经被提交的</li>\n<li>git rm [file name] 删除一个文件</li>\n<li>git commit -a 提交当前repos的所有的改变</li>\n<li>git add [file name] 添加一个文件到git index</li>\n<li>git commit -v 当你用－v参数的时候可以看commit的差异</li>\n<li>git commit -m “This is the message describing the commit” 添加commit信息</li>\n<li>git commit -a -a是代表add，把所有的change加到git index里然后再commit</li>\n<li>git commit -a -v 一般提交命令</li>\n<li>git log 看你commit的日志</li>\n<li>git diff 查看尚未暂存的更新</li>\n<li>git rm a.a 移除文件(从暂存区和工作区中删除)</li>\n<li>git rm –cached a.a 移除文件(只从暂存区中删除)</li>\n<li>git commit -m “remove” 移除文件(从Git中删除)</li>\n<li>git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)</li>\n<li>git diff –cached 或 $ git diff –staged 查看尚未提交的更新</li>\n<li>git stash push 将文件给push到一个临时空间中</li>\n<li>git stash pop 将文件从临时空间pop下来</li>\n</ul>\n<p>－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</p>\n<ul>\n<li>git remote add origin <a href=\"mailto:it@github.com\" target=\"_blank\" rel=\"noopener\">it@github.com</a>:username/Hello-World.git</li>\n<li>git push origin master 将本地项目给提交到服务器中</li>\n</ul>\n<p>－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</p>\n<ul>\n<li>git pull 本地与服务器端同步</li>\n</ul>\n<p>－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</p>\n<ul>\n<li>git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。</li>\n<li>git push origin server fix:awesome branch</li>\n</ul>\n<p>－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</p>\n<ul>\n<li>git fetch 相当于是从远程获取最新版本到本地，不会自动merge</li>\n<li>git commit -a -m “log_message” (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：</li>\n<li>git branch branch_0.1 master 从主分支master创建branch_0.1分支</li>\n<li>git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0</li>\n<li>git checkout branch_1.0/master 切换到branch_1.0/master分支</li>\n<li>du -hs</li>\n<li>git branch 删除远程branch</li>\n<li>git push origin:branch_remote_name</li>\n<li>git branch -r -d branch_remote_name</li>\n</ul>\n<p>－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</p>\n<p>初始化版本库，并提交到远程服务器端</p>\n<ul>\n<li><p>mkdir </p>\n<p>新建一个文件夹，一个空格后接你的文件夹的名字</p>\n</li>\n<li><p>cd </p>\n<p>进入你的名字</p>\n</li>\n<li><p>git init本地初始化</p>\n</li>\n<li><p>touch README</p>\n</li>\n<li><p>git add README添加文件</p>\n</li>\n<li><p>git commit -m ‘first commit’</p>\n</li>\n<li><p>git remote add origin <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:daixu/WebApp.git增加一个远程服务器端</p>\n</li>\n</ul>\n<p>细讲我怕又是几小时 <img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/v2-daba4efa3f71587ad62c168eeb711a01_hd-1571838207875.jpg\" alt=\"img\" style=\"zoom:50%;\">，下面我给你们简单介绍几个常用命令，也就是我门作业会用到的。也是今后我们用到最多的。</p>\n<h1 id=\"github注册\">github注册<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#github注册\"></a></h1><p>链接在手，天下你有，自己去注册吧：<a href=\"https://github.com/join?source=header-home\" target=\"_blank\" rel=\"noopener\">github注册链接</a></p>\n<p>好了现在你们什么都有了，你就是一个成熟的程序员的了</p>\n<p><img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/006szvLFgy1fwll8fpyzdj30b407dq5d.jpg\" alt=\"IT 从业者的压力究竟有多大？北京某互联网公司28岁程序员王某：其实我觉得吧，压力也没那么大 - 程序员表情包系列_程序员_码农表情\" class=\"article-img\"></p>\n<h1 id=\"接下来我们来偷懒\">接下来我们来偷懒<a href=\"2019/12/30/git常用命令以及如何在idea上可视化操作git#接下来我们来偷懒\"></a></h1><p>你觉得上面的git命令复杂可以先不看，github里面新建工程啥的太麻烦可以先不看。</p>\n<p>打开你神奇的idea，并打开你的项目</p>\n<p>假如现在你要上传你的项目到你的github，你只需要 点  点  点</p>\n<p><img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/TIM%E6%88%AA%E5%9B%BE20191023163526.png\" alt=\"TIM截图20191023163526\" class=\"article-img\"></p>\n<p>这一步如果你还没登陆的话会要求你登陆，我这已经登陆了所以直接弹出了这个框，点击share就会帮你在本地执行<code>git init</code> <code>git add .</code> <code>git add remote</code> 你的github里面创建仓库并把你的整个工程传上去，一把梭爽不爽 <img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/v2-4d2cb53368cc8b322c3075d23d1e0c34_hd.jpg\" alt=\"img\" style=\"zoom: 50%;\">爽</p>\n<p><img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/TIM%E6%88%AA%E5%9B%BE20191023163817.png\" alt=\"TIM截图20191023163817\" class=\"article-img\"></p>\n<p>好了正式开始你的程序员生活了<img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/1571820564925.jpeg\" alt=\"1571820564925\" style=\"zoom: 18%;\">，如何拉网络去你仓库的更新呢？只需  <strong>点</strong>   <strong>点 **   **点</strong></p>\n<p><img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/TIM%E6%88%AA%E5%9B%BE20191023165925.png\" alt=\"TIM截图20191023165925\" class=\"article-img\"></p>\n<p>其实拉取对现阶段的你们还没啥用，毕竟远程的就是你本地的本地提交的，但是你和别人合作开发的时候就需要拉取了，为啥呢，因为可能他改了之后提交到远程了呀，你需要更新本地到远程的最新版</p>\n<p>那如何提交呢？<img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/1571820567750.jpeg\" alt=\"1571820567750\" style=\"zoom:25%;\"> 只需要  <strong>点  点  点</strong> </p>\n<p><img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/TIM%E6%88%AA%E5%9B%BE20191023170652.png\" alt=\"TIM截图20191023170652\" class=\"article-img\"></p>\n<p>中间那个大框框里写你这次提交描述，点击下面的，commit就会提交到本地的版本库，你要是想提交到版本库之后直接把代码更新到远程github的仓库里，右边那个小三角，然后commit and push，提交到本地时同时上传远程，会出现，如下页面：</p>\n<p><img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/TIM%E6%88%AA%E5%9B%BE20191023170946.png\" alt=\"TIM截图20191023170946\" class=\"article-img\"></p>\n<p>点击push就可以了。</p>\n<p>那么问题来了，要是你就想直接commit在本地，等今天工作完了，再push到远程呢？只需   <strong>点</strong>   <strong>点</strong>    <strong>点</strong></p>\n<p><img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/TIM%E6%88%AA%E5%9B%BE20191023171200.png\" alt=\"TIM截图20191023171200\" class=\"article-img\"></p>\n<p>好了 ，现在为止你已经会了基本的git操作，是不是超简单。</p>\n<p>好了我来学习更多的git操作，对你自己说，<strong>”我  。 才  。  不  。  要  。   记  。   命  。  令。<img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/v2-fdddf30851f4370410c068f923e0c405_hd.jpg\" alt=\"img\" style=\"zoom:50%;\">“</strong></p>\n<p>假如你现在突发奇想有另外一个想法，想创建一个测试分支，来写那个功能，咋啦呢？ 只需  <strong>点    点    点</strong></p>\n<p> <img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/TIM%E6%88%AA%E5%9B%BE20191023171820.png\" alt=\"TIM截图20191023171820\" class=\"article-img\"></p>\n<p>点击最下面的git 就能唤出这个窗口，这个英文应该大家都能看懂吧，这个英文看不懂就退群吧，思考一下怎么上大学几个月就把高中英语忘完了。</p>\n<p>好了然后，你写了很多了，也提交了几次之后，你突然发现前面提交的那个有问题，不想提交了那咋办呢？ 只需<strong>点    点    点</strong></p>\n<p><img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/TIM%E6%88%AA%E5%9B%BE20191023172756.png\" alt=\"TIM截图20191023172756\" class=\"article-img\"></p>\n<p>那就退到你刚刚新提交的那个版本前面一个呗，例如我觉得<code>test2</code>有问题那我就右键点击<code>test1</code>，然后</p>\n<p><img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/TIM%E6%88%AA%E5%9B%BE20191023173110.png\" alt=\"TIM截图20191023173110\" class=\"article-img\"></p>\n<p>这样你刚刚的修改的提交就没了，但是如果你选择的时mix的话，你的修改还是会在的，变成没有提交状态了，我来解释一下这四个选项。</p>\n<ul>\n<li><code>soft</code>重置版本库但是暂存区和工作区不会</li>\n<li><code>mixed</code>会充值版本库和暂存区，但是工作区还在</li>\n<li><code>hard</code>会重置版本库暂存区工作区（危险操作，但是找都是可以找回来的）</li>\n<li><code>keep</code>重置所有的但是会保留文件</li>\n</ul>\n<p>如果你完全不要本地的所有更改了，可以直接hard到最近一个commit（危险操作，虽然我经常做<img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/v2-a11eadf17f85c2caef8ac2e391d0cf69_hd.jpg\" alt=\"img\" style=\"zoom:50%;\">）</p>\n<p>好了现在假如你完成了你突发奇想的功能感觉还不错，想把test分支合并到主分支要咋办呢？ 还是<strong>点    点    点</strong></p>\n<p>先切换回主分支</p>\n<p><img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/TIM%E6%88%AA%E5%9B%BE20191023175603.png\" alt=\"TIM截图20191023175603\" class=\"article-img\"></p>\n<p>然后</p>\n<p>点击test分支</p>\n<p><img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/TIM%E6%88%AA%E5%9B%BE20191023175637.png\" alt=\"TIM截图20191023175637\" class=\"article-img\"></p>\n<p>这样就合并啦</p>\n<p>这也太简单了吧<img src=\"/2019/12/30/git常用命令以及如何在idea上可视化操作git/v2-2f4c1f2a5eb83e1368364c9a87aa258c_hd.jpg\" alt=\"img\" style=\"zoom:50%;\"></p>\n","next":{"title":"idea条件断点","link":"2019/11/07/idea条件断点"},"plink":"https://treeeeeeee.github.io/2019/12/30/git常用命令以及如何在idea上可视化操作git/","toc":[{"title":"git","id":"git","index":"1","children":[{"title":"概念","id":"概念","index":"1.1","children":[{"title":"工作区（Working Directory）","id":"工作区（Working-Directory）","index":"1.1.1"},{"title":"暂存区（Stage 或 Index）","id":"暂存区（Stage-或-Index）","index":"1.1.2"},{"title":"版本库（commit History）","id":"版本库（commit-History）","index":"1.1.3"}]},{"title":"常用命令讲解","id":"常用命令讲解","index":"1.2","children":[{"title":"Git 常用命令汇总","id":"Git-常用命令汇总","index":"1.2.1"},{"title":"附页： Git 常用命令速查","id":"附页：-Git-常用命令速查","index":"1.2.2"}]}]},{"title":"github注册","id":"github注册","index":"2"},{"title":"接下来我们来偷懒","id":"接下来我们来偷懒","index":"3"}]}