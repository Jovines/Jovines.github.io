{"title":"JVM-内存管理和垃圾回收","date":"2020-04-01T13:38:41.000Z","link":"2020/04/01/JVM-内存管理和垃圾回收","comments":true,"tags":["干货"],"categories":["Java"],"updated":"2020-04-02T18:01:45.834Z","content":"<h2 id=\"内存管理\">内存管理<a href=\"2020/04/01/JVM-内存管理和垃圾回收#内存管理\"></a></h2><p><img src=\"/2020/04/01/JVM-内存管理和垃圾回收/JVM%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%80%BB%E5%9B%BEw.png\" alt=\"JVM 内存管理总图w\" class=\"article-img\"></p>\n<h3 id=\"方法区-（元空间-持久代）\">方法区 （元空间/持久代）<a href=\"2020/04/01/JVM-内存管理和垃圾回收#方法区-（元空间-持久代）\"></a></h3><p><strong>线程共享</strong>，存放类加载之后存放类的数据结构，静态常量，JIT(即时编译器)编译后代码也在方法区存放</p>\n<h3 id=\"堆区\">堆区<a href=\"2020/04/01/JVM-内存管理和垃圾回收#堆区\"></a></h3><p><strong>线程共享</strong>，对象所在的区域，也是垃圾回收的主要场所</p>\n<h3 id=\"虚拟机栈\">虚拟机栈<a href=\"2020/04/01/JVM-内存管理和垃圾回收#虚拟机栈\"></a></h3><p>按照方法执行的顺序，先进后出</p>\n<h4 id=\"栈帧\">栈帧<a href=\"2020/04/01/JVM-内存管理和垃圾回收#栈帧\"></a></h4><ul>\n<li>局部变量表</li>\n<li>操作数栈</li>\n<li>动态链接</li>\n<li>方法出口</li>\n</ul>\n<p>来看看一段简单的代码，主要分析demo()方法</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        demo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>  <span class=\"title\">demo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = (a + b) * <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>这里的demo（）方法会有一个局部变量表</p>\n<p><img src=\"/2020/04/01/JVM-内存管理和垃圾回收/%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8%20(1).png\" alt=\"局部变量表 \" class=\"article-img\"></p>\n<p>赋默认值，真正使用的时候才会对其进行初始化。</p>\n<p>我们把编译好了的java文件利用javap命令对class文件进行反汇编 <code>javap -c Main.class</code></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">       1: invokespecial #1                  // Method java/lang/Object.\"&lt;init&gt;\":()V</span><br><span class=\"line\">       <span class=\"number\">4</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       <span class=\"comment\">//后面的#加数字代表动态链接，不然程序无法准确的找到</span></span><br><span class=\"line\">       <span class=\"comment\">// (执行静态方法#2【#2就代表一个静态方法，通过#2就可以准确找到所要执行的方法】)</span></span><br><span class=\"line\">       0: invokestatic  #2                  </span><br><span class=\"line\">       <span class=\"number\">3</span>: pop\t\t<span class=\"comment\">//将栈顶一个字长的数据弹出来</span></span><br><span class=\"line\">       <span class=\"number\">4</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       <span class=\"number\">0</span>: bipush        <span class=\"number\">20</span>  <span class=\"comment\">//将一个8位带符号整数（20）压入栈</span></span><br><span class=\"line\">       <span class=\"number\">2</span>: istore_0\t\t\t<span class=\"comment\">//将操作数栈中栈顶int类型的值存入局部变量0</span></span><br><span class=\"line\">       <span class=\"number\">3</span>: bipush        <span class=\"number\">30</span>\t<span class=\"comment\">//将一个8位带符号整数（30）压入栈</span></span><br><span class=\"line\">       <span class=\"number\">5</span>: istore_1\t\t\t<span class=\"comment\">//将操作数栈中栈顶int类型的值存入局部变量1</span></span><br><span class=\"line\">       <span class=\"number\">6</span>: iload_0\t\t\t<span class=\"comment\">//将局部变量0中的int类型值装载到操作数栈</span></span><br><span class=\"line\">       <span class=\"number\">7</span>: iload_1\t\t\t<span class=\"comment\">//将局部变量1中的int类型值装载到操作数栈</span></span><br><span class=\"line\">       <span class=\"number\">8</span>: iadd\t\t\t\t<span class=\"comment\">//操作数栈中的前两个int弹出并相加，并将结果压入操作数栈顶</span></span><br><span class=\"line\">       <span class=\"number\">9</span>: bipush        <span class=\"number\">100</span>\t<span class=\"comment\">//将一个8位带符号整数（100）压入栈</span></span><br><span class=\"line\">      <span class=\"number\">11</span>: imul\t\t\t\t<span class=\"comment\">//操作数栈中的前两个int弹出并相乘，并将结果压入操作数栈顶</span></span><br><span class=\"line\">      <span class=\"number\">12</span>: istore_2\t\t\t<span class=\"comment\">//将操作数栈中栈顶int类型的值存入局部变量2</span></span><br><span class=\"line\">      <span class=\"number\">13</span>: iload_2\t\t\t<span class=\"comment\">//将局部变量2中的int类型值装载到操作数栈</span></span><br><span class=\"line\">      <span class=\"number\">14</span>: ireturn\t\t\t<span class=\"comment\">//将操作数栈中的int值返回</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\">//那么前面的序号什么意思呢，这里就是程序计数器为了保证指令的正确执行所需要的序号</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>从注释可以很清晰的看出来没一步都在做什么，至于JVM指令都代表什么可以看一下这个记录文档<a href=\"[https://jontree.github.io/2020/04/03/JVM-%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4%E8%AE%B0%E5%BD%95%E4%B8%80%E8%A7%88](https://jontree.github.io/2020/04/03/JVM-操作指令记录一览)\">指令详解</a></p>\n<p>至于动态上面的动态链接，这里重新给一个例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Demo demo = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>这次我们使用输出信息更加精确的<code>javap -v Main.class</code></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span></span><br><span class=\"line\">  minor version: 0</span><br><span class=\"line\">  major version: <span class=\"number\">56</span></span><br><span class=\"line\">  flags: (<span class=\"number\">0x0021</span>) ACC_PUBLIC, ACC_SUPER</span><br><span class=\"line\">  this_class: #4                          // Main</span><br><span class=\"line\">  super_class: #5                         // java/lang/Object</span><br><span class=\"line\">  interfaces: <span class=\"number\">0</span>, fields: <span class=\"number\">0</span>, methods: <span class=\"number\">2</span>, attributes: <span class=\"number\">1</span></span><br><span class=\"line\">Constant pool:<span class=\"comment\">//这里声明一些映射，方便下面链接</span></span><br><span class=\"line\">   #1 = Methodref          #5.#21         // java/lang/Object.\"&lt;init&gt;\":()V</span><br><span class=\"line\">   #2 = Class              #22            // Demo</span><br><span class=\"line\">   #3 = Methodref          #2.#21         // Demo.\"&lt;init&gt;\":()V</span><br><span class=\"line\">   #4 = Class              #23            // Main</span><br><span class=\"line\">   #5 = Class              #24            // java/lang/Object</span><br><span class=\"line\">   #6 = Utf8               &lt;init&gt;</span><br><span class=\"line\">   #7 = Utf8               ()V</span><br><span class=\"line\">   #8 = Utf8               Code</span><br><span class=\"line\">   #9 = Utf8               LineNumberTable</span><br><span class=\"line\">  #10 = Utf8               LocalVariableTable</span><br><span class=\"line\">  #11 = Utf8               this</span><br><span class=\"line\">  #12 = Utf8               LMain;</span><br><span class=\"line\">  #13 = Utf8               main</span><br><span class=\"line\">  #14 = Utf8               ([Ljava/lang/String;)V</span><br><span class=\"line\">  #15 = Utf8               args</span><br><span class=\"line\">  #16 = Utf8               [Ljava/lang/String;</span><br><span class=\"line\">  #17 = Utf8               demo</span><br><span class=\"line\">  #18 = Utf8               LDemo;</span><br><span class=\"line\">  #19 = Utf8               SourceFile</span><br><span class=\"line\">  #20 = Utf8               Main.java</span><br><span class=\"line\">  #21 = NameAndType        #6:#7          // \"&lt;init&gt;\":()V</span><br><span class=\"line\">  #22 = Utf8               Demo</span><br><span class=\"line\">  #23 = Utf8               Main</span><br><span class=\"line\">  #24 = Utf8               java/lang/Object</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (<span class=\"number\">0x0001</span>) ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">1</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">         1: invokespecial #1                  // Method java/lang/Object.\"&lt;init&gt;\":()V</span><br><span class=\"line\">         <span class=\"number\">4</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">5</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            <span class=\"number\">0</span>       <span class=\"number\">5</span>     <span class=\"number\">0</span>  <span class=\"keyword\">this</span>   LMain;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;<span class=\"comment\">//main方法</span></span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: (<span class=\"number\">0x0009</span>) ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">2</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"comment\">//new 指令在堆中创建一个Java对象，并将该对象的地址压入操作数栈</span></span><br><span class=\"line\">         0: new           #2                  // class Demo</span><br><span class=\"line\">         <span class=\"comment\">//复制栈顶一个字长的数据（这里是上面创建的java对象的地址，此时操作数栈中有两个地址）</span></span><br><span class=\"line\">         <span class=\"number\">3</span>: dup</span><br><span class=\"line\">         <span class=\"comment\">//使用栈顶的地址调用方法并弹出栈顶</span></span><br><span class=\"line\">         4: invokespecial #3                  // Method Demo.\"&lt;init&gt;\":()V</span><br><span class=\"line\">         <span class=\"comment\">//将引用类型或returnAddress类型值存入局部变量1(这里将剩下的一份地址存到局部变量里面去了)</span></span><br><span class=\"line\">         <span class=\"number\">7</span>: astore_1</span><br><span class=\"line\">         <span class=\"number\">8</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">7</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">8</span>: <span class=\"number\">8</span></span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            <span class=\"number\">0</span>       <span class=\"number\">9</span>     <span class=\"number\">0</span>  args   [Ljava/lang/String;</span><br><span class=\"line\">            <span class=\"number\">8</span>       <span class=\"number\">1</span>     <span class=\"number\">1</span>  demo   LDemo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"程序计数器\">程序计数器<a href=\"2020/04/01/JVM-内存管理和垃圾回收#程序计数器\"></a></h3><p>当前线程执行的字节码的位置指示器</p>\n<h3 id=\"本地方法栈\">本地方法栈<a href=\"2020/04/01/JVM-内存管理和垃圾回收#本地方法栈\"></a></h3><p>为JVM提供使用native方法的服务大致结构和虚拟机栈差不多 </p>\n<h2 id=\"垃圾回收\">垃圾回收<a href=\"2020/04/01/JVM-内存管理和垃圾回收#垃圾回收\"></a></h2><p>STW（stop the world）：停止其他所有工作</p>\n<p>Minor GC：轻量级，耗时短，会出现STW</p>\n<p>Full GC：重量级，耗时长，会出现STW</p>\n<h3 id=\"分代垃圾回收\">分代垃圾回收<a href=\"2020/04/01/JVM-内存管理和垃圾回收#分代垃圾回收\"></a></h3><h4 id=\"新生代\">新生代<a href=\"2020/04/01/JVM-内存管理和垃圾回收#新生代\"></a></h4><p>对象会被优先被分配到这个地方</p>\n<h4 id=\"老年代\">老年代<a href=\"2020/04/01/JVM-内存管理和垃圾回收#老年代\"></a></h4><p>当对象满足一定条件之后会被放到老年代</p>\n<p><strong>注意</strong>：java8之后老年代在Full GC之前是会执行一次Minor GC的，如果内存依然不足，才会执行Full GC</p>\n<h3 id=\"算法\">算法<a href=\"2020/04/01/JVM-内存管理和垃圾回收#算法\"></a></h3><ul>\n<li><p>标记清除</p>\n<p>优点：快</p>\n<p>缺点：会出现内存碎片，导致大对象进来会直接进入老年代</p>\n</li>\n<li><p>标记整理</p>\n<p>解决上面的的内存碎片问题</p>\n</li>\n<li><p>复制</p>\n<p>From（S0）区和To（S1）区来实现这个算法。</p>\n<blockquote>\n<p>这也是为什么需要交换的原因，To（S1）区永远保持空白</p>\n</blockquote>\n</li>\n</ul>\n","prev":{"title":"JVM 操作指令记录一览","link":"2020/04/03/JVM-操作指令记录一览"},"next":{"title":"类加载和类加载器","link":"2020/04/01/类加载和类加载器"},"plink":"https://treeeeeeee.github.io/2020/04/01/JVM-内存管理和垃圾回收/","toc":[{"title":"内存管理","id":"内存管理","index":"1","children":[{"title":"方法区 （元空间/持久代）","id":"方法区-（元空间-持久代）","index":"1.1"},{"title":"堆区","id":"堆区","index":"1.2"},{"title":"虚拟机栈","id":"虚拟机栈","index":"1.3","children":[{"title":"栈帧","id":"栈帧","index":"1.3.1"}]},{"title":"程序计数器","id":"程序计数器","index":"1.4"},{"title":"本地方法栈","id":"本地方法栈","index":"1.5"}]},{"title":"垃圾回收","id":"垃圾回收","index":"2","children":[{"title":"分代垃圾回收","id":"分代垃圾回收","index":"2.1","children":[{"title":"新生代","id":"新生代","index":"2.1.1"},{"title":"老年代","id":"老年代","index":"2.1.2"}]},{"title":"算法","id":"算法","index":"2.2"}]}]}