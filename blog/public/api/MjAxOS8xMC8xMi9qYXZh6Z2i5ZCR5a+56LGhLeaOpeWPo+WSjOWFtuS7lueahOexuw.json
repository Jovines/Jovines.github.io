{"title":"java面向对象-接口和其他的类","date":"2019-10-12T06:34:00.000Z","author":"Jon","link":"2019/10/12/java面向对象-接口和其他的类","comments":true,"tags":["java","课件"],"categories":["java"],"updated":"2019-10-22T18:39:04.902Z","content":"<h1 id=\"前言：\">前言：<a href=\"2019/10/12/java面向对象-接口和其他的类#前言：\"></a></h1><p><strong>听我讲课也就图一乐，要想真学到东西还是得自己看书。</strong></p>\n<p><strong>大学学习最重要的莫过于是自学能力，我归纳的东西也许细节上有可能和书上有差异，因为我毕竟不是专业的，要想深究还是得对照书去看，我这只是对你们的一个引导</strong>。</p>\n<p><strong>万物皆可为对象那么对象与对象之间肯定不是独立的，上节课谢磊学长讲了类的继承，那是一种最广泛的关系。今天我们了解一点更加抽象一点的东西，但是只要大家认真听我想还是会有所明白。</strong></p>\n<h1 id=\"先来吹吹概念\">先来吹吹概念 <img src=\"/2019/10/12/java面向对象-接口和其他的类/6af89bc8gw1f8tzvsvn8gj20a00a00tp.jpg\" alt=\"这和吃饭时扶碗是一个概念\" style=\"zoom:25%;\"><a href=\"2019/10/12/java面向对象-接口和其他的类#先来吹吹概念\"></a></h1><h2 id=\"接口\">接口<a href=\"2019/10/12/java面向对象-接口和其他的类#接口\"></a></h2><h3 id=\"什么是接口？\">什么是接口？<a href=\"2019/10/12/java面向对象-接口和其他的类#什么是接口？\"></a></h3><blockquote>\n<p>接口最通俗的来讲就是一种统一的规范或者叫做协议，接口这个名称有点晦涩难懂，但是其实接口就是一个基于双方或者多方的协议</p>\n<p>下面举几个例子：</p>\n<ul>\n<li>你们用的插座的插孔可以被叫做接口（协议），因为这个规范存在，在中国无论你是什么充电器，只要是这个充电口，那么我就会给你输出电流，至于你充什么，干什么我都不管。</li>\n<li>你去面试，他说你必须有本科及以上的文凭且必须过了四级才能有面试资格，这也算事接口（协议），因为如果你没有这些东西，就不能去面试，至于你是怎么努力学习拿到本科文凭和怎么努力拿到四级证书的，一律不管。</li>\n<li>我今天布置了作业，我要收的是我布置的这些作业，至于你们每个人怎么去做出来我是不管的，那我布置的作业就是接口（协议），你们按照题目实现相应的功能就好，最后验收我也只会根据我布置的作业的应该输出的结果来看你是不是完成作业。（当然，当然我在作业文件中指出你不能用啥，我还是会看的具体细节的）</li>\n</ul>\n<p>现在，接口你们应该都应该大致明白是什么了吧。</p>\n</blockquote>\n<h3 id=\"接口有什么作用？或者接口存在的必要性？\">接口有什么作用？或者接口存在的必要性？<a href=\"2019/10/12/java面向对象-接口和其他的类#接口有什么作用？或者接口存在的必要性？\"></a></h3><blockquote>\n<p>还是上一节的例子，如果国家没有规定这个插座的标准，那每个厂家的有自己的一套，你买公牛的插座就得买支持公牛插座的电器。出去在中国其他地方旅游你就只有背着各式各样的转接头。嗯，锻炼身体也是好事嘛。</p>\n<p>所以国家就制定了标准。</p>\n<p>所以编程中接口的重要性也就凸显出来了</p>\n</blockquote>\n<h3 id=\"编程中的接口？\">编程中的接口？<a href=\"2019/10/12/java面向对象-接口和其他的类#编程中的接口？\"></a></h3><blockquote>\n<p><strong>场景案例</strong>：</p>\n<p>现在开始你就是bat当中的员工之一，你的上级太多了，都要吩咐你做事：</p>\n<ul>\n<li>大boss想要员工会帮他给买部手机</li>\n<li>二boss想要员工会销售一套房子</li>\n<li>三boss想要员工会帮忙搭讪小姐姐</li>\n<li>四boss想要员工会跟他一起打游戏</li>\n<li>…………..</li>\n</ul>\n<p>一共有不知道多少个boss，总之你是底层员工嘛。</p>\n<p>那么问题来了，这个员工类究竟得怎么设计呢，真是一个难题，而且老板门想要叫这个员工去做事的时候怎么知道这个员工会呢？</p>\n<p>答案：</p>\n<p>其实很简单，把这些行为统统抽象成接口。</p>\n<p>例如：</p>\n<p>定义下面一些接口：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BuyCellPhone</span> </span>&#123;</span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buycellphone</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BuyHouse</span> </span>&#123;</span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buyHouse</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TrickGirl</span> </span>&#123;</span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">trickGirl</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PlayingGamesTogether</span> </span>&#123;</span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">playingGameTogether</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<blockquote>\n<p>………………………………………………………(此处还有无数个接口)</p>\n<p>那么这些接口有什么用呢？</p>\n<p>对应的老板只需要持有自己熟悉的接口的引用，在需要的时候调用方法就好了，而不需要去了解认识每一个人。下面以大老板为例：</p>\n<p>首先必须的有一个实现了这个</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  * 实现了买手机这个功能接口的员工</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  */</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Staff</span> <span class=\"keyword\">implements</span> <span class=\"title\">BuyCellPhone</span> </span>&#123;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&gt;     <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Staff</span><span class=\"params\">(String name, String sex)</span> </span>&#123;</span><br><span class=\"line\">&gt;         <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&gt;         <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     <span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buycellphone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;         System.out.println(<span class=\"string\">\"屁颠屁颠帮老板去买手机\"</span>);</span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<blockquote>\n<p>此时身为老板的只需要只需要这样一个方法，就可以找个员工帮他买手机了，并且他可以完全不用了解这个员工谁，到底是干啥的，但是至少这人是实现了这个接口，就说明是有这个能力的</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lookingForSomeoneToBuyAMobilePhone</span><span class=\"params\">(BuyCellPhone buyCellPhone)</span> </span>&#123;</span><br><span class=\"line\">&gt;     buyCellPhone.buycellphone();</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<h2 id=\"抽象类\">抽象类<a href=\"2019/10/12/java面向对象-接口和其他的类#抽象类\"></a></h2><p><strong>我都叫抽象类了，你说我抽象不抽象，我觉得我比上面那玩意儿抽象，你说呢？</strong></p>\n<h3 id=\"黄坤坤告诉你到底有多抽象？\"><img src=\"/2019/10/12/java面向对象-接口和其他的类/164336559DA3C001F7D365CBC0A67998.jpg\" alt=\"164336559DA3C001F7D365CBC0A67998\" style=\"zoom:25%;\">  黄坤坤告诉你到底有多抽象？<a href=\"2019/10/12/java面向对象-接口和其他的类#黄坤坤告诉你到底有多抽象？\"></a></h3><p><strong>抽象？我叫抽象类我就抽象啦？那hljj是jj吗？</strong></p>\n<ul>\n<li><p><strong>听听抽象类的自白</strong></p>\n<p><strong>（抽象类独白）</strong>：</p>\n<p>​        天生就是用来被别人来继承的，简而言之，只有当爸爸的命，从不当儿子。可能有些事，必须得儿子去做，别直接叫我去做事。</p>\n</li>\n<li><p>”<strong>只当爸爸</strong>“</p>\n<p>说明被继承是绝对需要，大部分抽象类都是没有完整实现类功能的类，等待子类继承去实现，所以它是不可以被实例化成对像的。</p>\n</li>\n<li><p>“<strong>有些事必须得儿子去做</strong>”</p>\n<p>说明它可能存在方法是抽象的，必须得子类去具体实现。</p>\n</li>\n<li><p>“<strong>别直接叫我做事</strong>”  </p>\n<p>说明它是不可以直接示例化的。</p>\n</li>\n</ul>\n<h3 id=\"好了，说完上面牵强的解释，现在我们来看看例子：\">好了，说完上面牵强的解释，现在我们来看看例子：<a href=\"2019/10/12/java面向对象-接口和其他的类#好了，说完上面牵强的解释，现在我们来看看例子：\"></a></h3><p><img src=\"/2019/10/12/java面向对象-接口和其他的类/ceeb653ejw1fai8r9ct23j205c05q3yn.jpg\" alt=\"爸爸在呢 有事快说 - 和爸爸斗图 斗图+表情_爸爸_斗图表情\" class=\"article-img\"></p>\n<h1 id=\"好了，开始开飞机了\">好了，开始开飞机了<a href=\"2019/10/12/java面向对象-接口和其他的类#好了，开始开飞机了\"></a></h1><h1 id=\"接口-1\">接口<a href=\"2019/10/12/java面向对象-接口和其他的类#接口-1\"></a></h1><h2 id=\"基本概念\">基本概念<a href=\"2019/10/12/java面向对象-接口和其他的类#基本概念\"></a></h2><p> 接口，英文称作<strong>interface</strong>，在软件工程中，接口泛指供别人调用的方法或者函数。从这里，我们可以体会到Java语言设计者的初衷，它是对<strong>行为</strong>的抽象。在Java中，定一个接口的形式如下： </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InterfaceName</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>需要注意的是:</p>\n<ul>\n<li><p>接口中的变量会被隐式地指定为public static final变量 </p>\n<blockquote>\n<p>用其他关键词修饰会报错，例如：</p>\n<ul>\n<li><code>public static final</code>，<code>private</code></li>\n</ul>\n</blockquote>\n</li>\n<li><p>方法会被隐式地指定为public abstract方法且只能是public abstract方法 </p>\n<blockquote>\n<p>用其他关键词会报错，例如：</p>\n<ul>\n<li><code>private</code>、<code>protected</code>、<code>static</code>、 <code>final</code></li>\n</ul>\n</blockquote>\n<p>接口是一种极度抽象的类型，它比抽象类更加“抽象”，并且一般情况下不在接口中定义变量。 </p>\n<p>可以看出，允许一个类遵循多个特定的接口。如果一个非抽象类遵循了某个接口，就必须实现该接口中的所有方法。对于遵循某个接口的抽象类，可以不实现该接口中的抽象方法。 </p>\n</li>\n</ul>\n<h2 id=\"回调\">回调<a href=\"2019/10/12/java面向对象-接口和其他的类#回调\"></a></h2><p>可能初识这个名词觉得高大上和陌生，下面我仔细的讲解一下回调到底是什么呢？</p>\n<p><strong>我在知乎上看到一个高赞回答：</strong></p>\n<blockquote>\n<p>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。</p>\n</blockquote>\n<p>这个回答在我学习接口时就看到了，但是当时还是一知半解，下面我们用代码来解释一下。</p>\n<p>首先我们定义一个接口<code>Notify</code>，通知接口</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Notify</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>我们定义一个<code>Shop</code>类</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shop</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Notify notify;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registrationNoticeMethod</span><span class=\"params\">(Notify notify)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notify = notify;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">tellCustomerOutOfStock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"对不起，我们这没有货了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">arrivalNotice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (notify != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            notify.call();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>定义一个顾客类<code>Customer</code>，并且让顾客类实现<code>Notify</code>这个接口</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Notify</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> phoneNum = <span class=\"number\">1234567</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"打电话给\"</span> + phoneNum + <span class=\"string\">\"通知到货了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">goShopping</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"出门购物\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>主程序：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 主函数</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//实例化对象</span></span><br><span class=\"line\">        Customer customer = <span class=\"keyword\">new</span> Customer();</span><br><span class=\"line\">        Shop shop = <span class=\"keyword\">new</span> Shop();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//顾客出门购物</span></span><br><span class=\"line\">        customer.goShopping();</span><br><span class=\"line\">        pause();</span><br><span class=\"line\">        shop.tellCustomerOutOfStock();</span><br><span class=\"line\">        pause();</span><br><span class=\"line\">        shop.registrationNoticeMethod(customer);</span><br><span class=\"line\">        <span class=\"comment\">//第二天到货了</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第二天\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        shop.arrivalNotice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个函数不用在意，只是为了演示效果，增加暂停</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">pause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Scanner(System.in).nextLine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>输出：</p>\n<p><img src=\"/2019/10/12/java面向对象-接口和其他的类/TIM%E6%88%AA%E5%9B%BE20191022120614.png\" alt=\"TIM截图20191022120614\" class=\"article-img\"></p>\n<p><a href=\"2019/10/12/java面向对象-接口和其他的类#这里其中有个注解\">代码中的@Override注解说明</a>点击进入</p>\n<h2 id=\"特殊的接口\">特殊的接口<a href=\"2019/10/12/java面向对象-接口和其他的类#特殊的接口\"></a></h2><p>函数式接口</p>\n<h2 id=\"接口继承接口以及java8之后的接口多继承问题\">接口继承接口以及java8之后的接口多继承问题<a href=\"2019/10/12/java面向对象-接口和其他的类#接口继承接口以及java8之后的接口多继承问题\"></a></h2><p><a href=\"https://colobu.com/2014/11/04/Java-8-default-method-and-multiple-inheritance/\" target=\"_blank\" rel=\"noopener\">详细解释链接</a>可能失效，我这里简述一下。</p>\n<h4 id=\"java中不是没有多继承吗？\">java中不是没有多继承吗？<a href=\"2019/10/12/java面向对象-接口和其他的类#java中不是没有多继承吗？\"></a></h4><p><strong>java8之前</strong></p>\n<p>是的，的确java中没有多继承，但是在java中接口是个例外，接口可以多继承，因为接口没有方法体，所以不论实现哪个父接口的中的方法都是没有关系的。</p>\n<p><strong>java8之后</strong></p>\n<p>java8之后出现了接口的默认实现，就像以下的模式：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">hhh</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是B\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">hhh</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是C\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>如果有个接口继承前两个接口，就必须把冲突的方法重写</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span>, <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">hhh</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>如果有个类同时实现这两个接口也需要实现冲突默认方法</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">B</span>, <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hhh</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>那么问题来了</p>\n<h1 id=\"抽象类-1\">抽象类<a href=\"2019/10/12/java面向对象-接口和其他的类#抽象类-1\"></a></h1><h2 id=\"定义\">定义<a href=\"2019/10/12/java面向对象-接口和其他的类#定义\"></a></h2><ul>\n<li>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</li>\n<li>抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。</li>\n<li>由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类。</li>\n<li>父类包含了子类集合的常见的方法，但是由于父类本身是抽象的，所以不能使用这些方法。</li>\n<li>在Java中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li>\n</ul>\n<h2 id=\"怎么使用\">怎么使用<a href=\"2019/10/12/java面向对象-接口和其他的类#怎么使用\"></a></h2><h4 id=\"抽象类声明\">抽象类声明<a href=\"2019/10/12/java面向对象-接口和其他的类#抽象类声明\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 普通的类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>声明一个java抽象类只需要在正常的类的class之前加上<code>abstract</code></p>\n<h4 id=\"抽象方法声明\">抽象方法声明<a href=\"2019/10/12/java面向对象-接口和其他的类#抽象方法声明\"></a></h4><h2 id=\"使用时需要注意的：\">使用时需要注意的：<a href=\"2019/10/12/java面向对象-接口和其他的类#使用时需要注意的：\"></a></h2><ul>\n<li><p>抽象类<strong>不能被实例化</strong>，实例化的工作应该交<strong>由它的子类来完成</strong>，它<strong>只需要有一个引用即可</strong>。</p>\n<blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  * 生物抽象类（因为没有一个具体的实体可以是生物，所以应该被抽象为更高的抽象类）</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  */</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Biological</span> </span>&#123;</span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">alive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">death</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  * 人类，继承生物，可以没有自己的方法，全部是从抽象类继承的非抽象方法（注意：抽象类中有抽象方法子类必须实现）</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  */</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">Biological</span> </span>&#123;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<blockquote>\n<p>最重要的主程序来了，仔细看注释介绍</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  * 主程序，以下只是演示，注释最重要</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  */</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">&gt;         Biological biological = <span class=\"keyword\">new</span> Person();<span class=\"comment\">//初始化时将人类的对象赋值给生物的引用时可以的</span></span><br><span class=\"line\">&gt;         Person person = <span class=\"keyword\">new</span> Person();<span class=\"comment\">//生成一个人类的对象</span></span><br><span class=\"line\">&gt;         biological = person;<span class=\"comment\">//将人类的对象复制给生物的引用也是没问题</span></span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n</li>\n<li><p><strong>抽象方法</strong>必须<strong>由子类来进行重写</strong>。</p>\n<blockquote>\n<p><strong>抽象类</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  * 生物类</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  */</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Biological</span> </span>&#123;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">getEnergy</span><span class=\"params\">()</span></span>;<span class=\"comment\">//增加了获取能量这个抽象方法</span></span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">alive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">death</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<blockquote>\n<p>人类</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  * 人类，继承生物，继承了两个非抽象方法，并实现了抽象方法</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  */</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">Biological</span> </span>&#123;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     <span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getEnergy</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//实现的抽象</span></span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n</li>\n<li><p>只要<strong>包含一个抽象方法的抽象类</strong>，该方法<strong>必须要定义成抽象类</strong>，不管是否还包含有其他方法。</p>\n</li>\n<li><p>抽象类中<strong>可以包含具体的方法</strong>，当然<strong>也可以不包含抽象方法</strong>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 有抽象方法的抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 没有抽象方法的抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">a</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>子类中的抽象方法<strong>不能</strong>与父类的抽象方法<strong>同名</strong>。</p>\n</li>\n<li><p><code>abstract</code>不能与<code>final</code>并列修饰同一个类。</p>\n<blockquote>\n<p>这个显而易见，既然是抽象的，就必须需要时需要被子类实现的，所以不可能时final</p>\n</blockquote>\n</li>\n<li><p><code>abstract</code> 不能与<code>private</code>、<code>static</code>、<code>final</code>或并列修饰同一个方法。</p>\n<blockquote>\n<p><code>private</code>:抽象方法，必须是需要被继承的实现的，所以不可以用私有修饰符修饰</p>\n<p><code>static</code>：同样，抽象方法是需要被实现的，但是静态方法是不可以被重写</p>\n<p>final：同上</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"抽象类和接口的区别\">抽象类和接口的区别<a href=\"2019/10/12/java面向对象-接口和其他的类#抽象类和接口的区别\"></a></h1><h2 id=\"语法层面上的区别\">语法层面上的区别<a href=\"2019/10/12/java面向对象-接口和其他的类#语法层面上的区别\"></a></h2><ul>\n<li><strong>抽象类</strong>可以提供<strong>成员方法的实现细节</strong>，而<strong>接口</strong>中只能存在<strong>public abstract 方法</strong>；</li>\n<li><strong>抽象类</strong>中的成员变量可以是<strong>各种类型</strong>的，而<strong>接口</strong>中的成员变量只能是<strong>public static final类型</strong>的；</li>\n<li><strong>接口</strong>中<strong>不能含有静态代码块</strong>以及<strong>静态方法</strong>，而<strong>抽象类</strong>可以有<strong>静态代码块</strong>和<strong>静态方法</strong>；</li>\n<li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li>\n</ul>\n<h2 id=\"设计层面上的区别\">设计层面上的区别<a href=\"2019/10/12/java面向对象-接口和其他的类#设计层面上的区别\"></a></h2><ul>\n<li><p>抽象类是对一种<strong>事物的抽象</strong>，即<strong>对类抽象</strong>，而接口是<strong>对行为的抽象</strong>。</p>\n</li>\n<li><p>抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。</p>\n</li>\n<li><p>举个简单的例子，飞机和鸟是不同类的事物，但是它们都有一个共性，就是都会飞。那么在设计的时候，可以将飞机设计为一个类Airplane，将鸟设计为一个类Bird，但是不能将 飞行 这个特性也设计为类，因此它只是一个行为特性，并不是对一类事物的抽象描述。此时可以将 飞行 设计为一个接口Fly，包含方法fly( )，然后Airplane和Bird分别根据自己的需要实现Fly这个接口。然后至于有不同种类的飞机，比如战斗机、民用飞机等直接继承Airplane即可，对于鸟也是类似的，不同种类的鸟直接继承Bird类即可。从这里可以看出，<strong>继承</strong>是一个 “<strong>是不是</strong>“的关系，而 <strong>接口</strong> 实现则是 “<strong>有没有</strong>“的关系。</p>\n</li>\n<li><p>如果一个类继承了某个抽象类，则子类必定是抽象类的种类，而<strong>接口实现则是有没有</strong>、<strong>具备不具备的关系</strong>，比如鸟是否能飞（或者是否具备飞行这个特点），能飞行则可以实现这个接口，不能飞行就不实现这个接口。</p>\n</li>\n<li><p>设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种模板式设计。什么是模板式设计？</p>\n<blockquote>\n<p> 最简单例子，大家都用过ppt里面的模板，如果用模板A设计了ppt B和ppt C，ppt B和ppt C公共的部分就是模板A了，如果它们的公共部分需要改动，则只需要改动模板A就可以了，不需要重新对ppt B和ppt C进行改动。而辐射式设计，比如某个电梯都装了某种报警器，一旦要更新报警器，就必须全部更新。也就是说对于抽象类，如果需要添加新的方法，可以直接在抽象类中添加具体的实现，子类可以不进行变更；而对于接口则不行，如果接口进行了变更，则所有实现这个接口的类都必须进行相应的改动。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"实际的例子\">实际的例子<a href=\"2019/10/12/java面向对象-接口和其他的类#实际的例子\"></a></h2><p>下面看一个网上流传最广泛的例子：门和警报的例子：门都有open( )和close( )两个动作，此时我们可以定义通过抽象类和接口来定义这个抽象概念：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 门的抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoorAbstract</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>　　或者：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 门的接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoorInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>但是现在如果我们需要门具有<strong>报警alarm( )</strong>的功能，那么该如何实现？下面提供两种思路：</p>\n<ul>\n<li>将这三个功能都放在抽象类里面，但是这样一来<strong>所有继承于这个抽象类的子类都具备了报警功能</strong>，但是有的门并不一定具备报警功能；</li>\n<li>将这三个功能都放在接口里面，需要用到<strong>报警功能的类就需要实现这个接口中的open( )和close( )</strong>，也许这个类根本就不具备open( )和close( )这两个功能，比如火灾报警器。</li>\n</ul>\n<p>很明显这个属性放到以上任何一个的当中都是不合适的，但是报警又是一个比较广泛的属性，java不支持多继承，所以最好将这个方法抽象到一个接口里面，这就是所谓的对行为抽象：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 报警的接口，所有实现了这个接口的类都是有报警这个功能</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Alarm</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">alarm</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>然后在对这个可以报警的们进行封装：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以报警的门</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmDoor</span> <span class=\"keyword\">extends</span> <span class=\"title\">DoorAbstract</span> <span class=\"keyword\">implements</span> <span class=\"title\">Alarm</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">alarm</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"这里其中有个注解\">这里其中有个注解<a href=\"2019/10/12/java面向对象-接口和其他的类#这里其中有个注解\"></a></h4><p>@Override我简单说明一下（至于注解是啥，不详细的讲解了下节课会讲到）：</p>\n<p><code>@Override</code>是伪代码,表示重写可以不写，不过写上有如下好处: </p>\n<ul>\n<li>可以当注释用,方便阅读，可以很明显的看到哪些方法是重写的方法；</li>\n<li>编译器可以给你验证@Override下面的方法名是否是你父类中所有的,如果没有则报错。比如你如果没写@Override而你下面的方法名又写错了，这时你的编译器是可以通过的(它以为这个方法是你的子类中自己增加的方法)。</li>\n</ul>\n<p>对于这里而言第二个作用是没有作用的，因为如果继承了抽象类，如果抽象类中含有抽象方法，必须实现这个方法不然编译器也会报错，接口也是同样的，前面说到接口中的方法默认是<code>public abstract</code>。</p>\n<h1 id=\"内部类\">内部类<a href=\"2019/10/12/java面向对象-接口和其他的类#内部类\"></a></h1><p> 顾名思义：可以将一个类的定义放在另一个类的定义内部，这就是内部类。 </p>\n<h2 id=\"怎么用？\">怎么用？<a href=\"2019/10/12/java面向对象-接口和其他的类#怎么用？\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类中定义类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>好了，你现在已经会了内部类了，你看多简单呐     <img src=\"/2019/10/12/java面向对象-接口和其他的类/v2-8da4b48b8262d2786486cb942571be4c_hd.jpg\" alt=\"img\"></p>\n<p>好了开玩笑的啦。</p>\n<h2 id=\"内部类小飞机\">内部类小飞机<a href=\"2019/10/12/java面向对象-接口和其他的类#内部类小飞机\"></a></h2><h2 id=\"为什么要使用内部类？\">为什么要使用内部类？<a href=\"2019/10/12/java面向对象-接口和其他的类#为什么要使用内部类？\"></a></h2><p>​        在《Think in java》也就是《java编程思想》中有这样一句话：使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。 </p>\n<p>​        在我们程序设计中有时候会存在一些使用接口很难解决的问题，这个时候我们可以利用内部类提供的、可以继承多个具体的或者抽象的类的能力来解决这些程序设计问题。可以这样说，接口只是解决了部分问题，而内部类使得多重继承的解决方案变得更加完整。</p>\n<p><img src=\"/2019/10/12/java面向对象-接口和其他的类/v2-acb2c980db4a235ed0538f34d9c2918d_hd-1571748707404.jpg\" alt=\"img\">完了上面这么简单的描述还听不懂 ，听不懂没关系，这样说我也不懂，来慢慢分析。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Mother</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>接下里骚操作来了：</p>\n<p>你可以这样子</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">implements</span> <span class=\"title\">Father</span>, <span class=\"title\">Mother</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>也可以这样子</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Daughter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mother_</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mother</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>但是不是一个类可以实现多个接口嘛，第二种实现还有什么意义呢。</p>\n<p>那么问题来了，如果爸爸妈妈他们不是接口而是一个抽象类或者类呢？现在应该理解更为深刻了。</p>\n<h2 id=\"内部类基础\">内部类基础<a href=\"2019/10/12/java面向对象-接口和其他的类#内部类基础\"></a></h2><p><code>.this</code>和<code>.new</code>语法</p>\n<p> 当我们在创建一个内部类的时候，它无形中就与外围类有了一种联系，依赖于这种联系，它可以无限制地访问外围类的元素。 </p>\n<p><strong>内部类如何访问外围类的东西呢？</strong></p>\n<blockquote>\n<p>当然直接用变量名就可以访问啦</p>\n</blockquote>\n<p><strong>内部类如何获取外围类的对象呢？（.this）</strong></p>\n<blockquote>\n<p>这样子：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  * 内部类示例</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  */</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">&gt;     String s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">&gt;         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lala</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;             A a = A.<span class=\"keyword\">this</span>;  <span class=\"comment\">//关键的地方</span></span><br><span class=\"line\">&gt;         &#125;</span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<p><strong>如何创建内部类的对象呢？</strong></p>\n<blockquote>\n<p><strong>在外围类内</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  * 内部类示例</span></span><br><span class=\"line\"><span class=\"comment\">&gt;  */</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">&gt;     String s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lala</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&gt;         B b = <span class=\"keyword\">new</span> B();  <span class=\"comment\">//关键的地方</span></span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<blockquote>\n<p><strong>在外围类外（也就是在其他地方）：</strong>（.new）</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; A a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">&gt; A.B b = a.new B();</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<p> 到这里了我们需要明确一点，<strong>内部类是个编译时的概念</strong>，一旦编译成功后，它就与外围类<strong>属于两个完全不同的类</strong>（当然他们之间还是有联系的）。对于一个名为OuterClass的外围类和一个名为InnerClass的内部类，在编译成功后，会出现这样两个class文件：<strong>OuterClass.class和OuterClass$InnerClass.class。</strong> </p>\n<p>关于java编译运行有兴趣了解<a href=\"http://jontree.github.io/2019/10/23/java%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3\" target=\"_blank\" rel=\"noopener\">自己了解</a></p>\n<h2 id=\"内部类的分类\">内部类的分类<a href=\"2019/10/12/java面向对象-接口和其他的类#内部类的分类\"></a></h2><h3 id=\"成员内部类\">成员内部类<a href=\"2019/10/12/java面向对象-接口和其他的类#成员内部类\"></a></h3><ul>\n<li>成员内部类中不能存在任何static的变量和方法；</li>\n<li>成员内部类是依附于外围类的，所以只有先创建了外围类才能够创建内部类。 </li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类中定义类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>对就是这种最简单的内部类</p>\n<h3 id=\"局部内部类\">局部内部类<a href=\"2019/10/12/java面向对象-接口和其他的类#局部内部类\"></a></h3><ul>\n<li><p>嵌套在方法或者作用域内的，对于这个类的使用主要是应用与解决比较复杂的问题</p>\n<blockquote>\n<p>说明直接随便在一个类中随便找个位置，写个大括号，大括号中中也是可以写局部内部类的</p>\n<p>例如：（这个简单例子可能有点绕）</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">&gt; * 含有局部内部类的类B</span></span><br><span class=\"line\"><span class=\"comment\">&gt; */</span></span><br><span class=\"line\">&gt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">&gt;    &#123;\t\t\t\t\t\t<span class=\"comment\">//这是一个静态代码块</span></span><br><span class=\"line\">&gt;        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;\t\t\t<span class=\"comment\">//这是一个局部内部类，作用域就在静态代码块中</span></span><br><span class=\"line\">&gt;            </span><br><span class=\"line\">&gt;        &#125;</span><br><span class=\"line\">&gt;    &#125;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></div></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n</li>\n<li><p>通常是想创建一个类来辅助我们的解决方案，但那时又不希望这个类是公共可用的，所以就产生了局部内部类</p>\n</li>\n<li><p>局部内部类和成员内部类一样被编译，只是它的作用域发生了改变</p>\n</li>\n<li><p>它只能在该方法和属性中被使用，出了该方法和属性就会失效 </p>\n</li>\n</ul>\n<p>首先为了方便，我门先定义一个接口：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 口接口A</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>下面开始正式的例子：</p>\n<p>可以返回局部内部类实例化对象的函数（下面有个类B，里面有个方法返回A的引用，并且函数体里面有个实现了接口A的局部内部类C）</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 含有局部内部类的类B</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> A <span class=\"title\">lala</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">implements</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>你可以直接这样子定义然后在方法中使用（作用域在方法内）</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 含有局部内部类的类B</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lala</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        C c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"匿名内部类\">匿名内部类<a href=\"2019/10/12/java面向对象-接口和其他的类#匿名内部类\"></a></h3><ul>\n<li><p>匿名内部类是没有访问修饰符的。</p>\n</li>\n<li><p>new 匿名内部类，这个类首先是要存在的。如果我们将那个InnerClass接口注释掉，就会出现编译出错。</p>\n</li>\n<li><p>注意getInnerClass()方法的形参，第一个形参是用final修饰的，而第二个却没有。同时我们也发现第二个形参在匿名内部类中没有使用过，所以当所在方法的形参需要被匿名内部类使用，那么这个形参就必须为final。</p>\n<blockquote>\n<p>为什么一定要是final<img src=\"/2019/10/12/java面向对象-接口和其他的类/v2-114ee3caaad0d612d39818c9f3f81201_hd.jpg\" alt=\"img\">？？？【这个现阶段不用了解，自己有空可以去看看】</p>\n<p>那么又来了一个名词，“<strong>闭包</strong>”</p>\n<p>闭包是什么呢？最简单来说：</p>\n<ol>\n<li>一个依赖于外部环境自由变量的函数</li>\n<li>这个函数能够访问外部环境里的自由变量</li>\n</ol>\n<p>简而言之就是，</p>\n</blockquote>\n</li>\n<li><p>匿名内部类是没有构造方法的。因为它连名字都没有何来构造方法。</p>\n</li>\n</ul>\n","prev":{"title":"@Override浅认识","link":"2019/10/22/verride浅认识"},"next":{"title":"ssh用法及命令","link":"2019/10/07/ssh用法及命令"},"plink":"https://treeeeeeee.github.io/2019/10/12/java面向对象-接口和其他的类/","toc":[{"title":"前言：","id":"前言：","index":"1"},{"title":"先来吹吹概念 <img src=\"/2019/10/12/java面向对象-接口和其他的类/6af89bc8gw1f8tzvsvn8gj20a00a00tp.jpg\" alt=\"这和吃饭时扶碗是一个概念\" style=\"zoom:25%;\">","id":"先来吹吹概念","index":"2","children":[{"title":"接口","id":"接口","index":"2.1","children":[{"title":"什么是接口？","id":"什么是接口？","index":"2.1.1"},{"title":"接口有什么作用？或者接口存在的必要性？","id":"接口有什么作用？或者接口存在的必要性？","index":"2.1.2"},{"title":"编程中的接口？","id":"编程中的接口？","index":"2.1.3"}]},{"title":"抽象类","id":"抽象类","index":"2.2","children":[{"title":"<img src=\"/2019/10/12/java面向对象-接口和其他的类/164336559DA3C001F7D365CBC0A67998.jpg\" alt=\"164336559DA3C001F7D365CBC0A67998\" style=\"zoom:25%;\">  黄坤坤告诉你到底有多抽象？","id":"黄坤坤告诉你到底有多抽象？","index":"2.2.1"},{"title":"好了，说完上面牵强的解释，现在我们来看看例子：","id":"好了，说完上面牵强的解释，现在我们来看看例子：","index":"2.2.2"}]}]},{"title":"好了，开始开飞机了","id":"好了，开始开飞机了","index":"3"},{"title":"接口","id":"接口-1","index":"4","children":[{"title":"基本概念","id":"基本概念","index":"4.1"},{"title":"回调","id":"回调","index":"4.2"},{"title":"特殊的接口","id":"特殊的接口","index":"4.3"},{"title":"接口继承接口以及java8之后的接口多继承问题","id":"接口继承接口以及java8之后的接口多继承问题","index":"4.4"}]},{"title":"抽象类","id":"抽象类-1","index":"5","children":[{"title":"定义","id":"定义","index":"5.1"},{"title":"怎么使用","id":"怎么使用","index":"5.2"},{"title":"使用时需要注意的：","id":"使用时需要注意的：","index":"5.3"}]},{"title":"抽象类和接口的区别","id":"抽象类和接口的区别","index":"6","children":[{"title":"语法层面上的区别","id":"语法层面上的区别","index":"6.1"},{"title":"设计层面上的区别","id":"设计层面上的区别","index":"6.2"},{"title":"实际的例子","id":"实际的例子","index":"6.3"}]},{"title":"内部类","id":"内部类","index":"7","children":[{"title":"怎么用？","id":"怎么用？","index":"7.1"},{"title":"内部类小飞机","id":"内部类小飞机","index":"7.2"},{"title":"为什么要使用内部类？","id":"为什么要使用内部类？","index":"7.3"},{"title":"内部类基础","id":"内部类基础","index":"7.4"},{"title":"内部类的分类","id":"内部类的分类","index":"7.5","children":[{"title":"成员内部类","id":"成员内部类","index":"7.5.1"},{"title":"局部内部类","id":"局部内部类","index":"7.5.2"},{"title":"匿名内部类","id":"匿名内部类","index":"7.5.3"}]}]}]}