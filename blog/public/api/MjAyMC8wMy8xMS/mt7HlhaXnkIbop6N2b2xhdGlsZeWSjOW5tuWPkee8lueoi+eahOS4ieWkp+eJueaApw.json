{"title":"深入理解volatile和并发编程的三大特性","date":"2020-03-11T09:42:24.000Z","link":"2020/03/11/深入理解volatile和并发编程的三大特性","comments":true,"tags":["java并发"],"categories":["Java"],"updated":"2020-03-18T15:52:44.591Z","content":"<h1 id=\"一切之前\">一切之前<a href=\"2020/03/11/深入理解volatile和并发编程的三大特性#一切之前\"></a></h1><p><strong>早期</strong>计算机中<strong>CPU</strong>和<strong>内存</strong>的速度是差不多的，但在<strong>现代计算机</strong>中，<strong>CPU的指令速度远超内存的存取速度</strong>,由于<strong>计算机的存储设备</strong>与<strong>处理器的运算速度</strong>有<strong>几个数量级的差距</strong>，所以现代计算机系统都<strong>不得不加入一层</strong>读写速度尽可能接近处理器运算速度的<strong>高速缓存（Cache</strong>）来作为<strong>内存与处理器</strong>之间的<strong>缓冲</strong>：将运算需要使用到的数据复制到缓存中，让运算能快速进行，当运算结束后再<strong>从缓存同步回内存之中</strong>，这样处理器就无须等待缓慢的内存读写了。</p>\n<h2 id=\"JMM抽象结构模型\">JMM抽象结构模型<a href=\"2020/03/11/深入理解volatile和并发编程的三大特性#JMM抽象结构模型\"></a></h2><p><strong>JMM定义了Java 虚拟机(JVM)在计算机内存(RAM)中的工作方式</strong>。JVM是整个计算机虚拟模型，所以JMM是隶属于JVM的。</p>\n<p>从抽象的角度来看，<strong>JMM定义了线程和主内存之间的抽象关系</strong>：线程之间的<strong>共享变量存储在主内存</strong>（Main Memory）中，<strong>每个线程都有一个私有的本地内存</strong>（Local Memory），<strong>本地内存中存储了该线程以读/写共享变量的副本。</strong></p>\n<p>本地内存是JMM的一个<strong>抽象概念</strong>，<strong>并不真实存在</strong>。它涵盖了<strong>缓存、写缓冲区、寄存器以及其他的硬件和编译器优化</strong>。</p>\n<p>下面这个图很好的说明了<strong>JMM</strong>的工作方式</p>\n<p><img src=\"/2020/03/11/深入理解volatile和并发编程的三大特性/2615789-8c0b960a27af28db.webp\" alt=\"img\" class=\"article-img\"></p>\n<p>那么高速缓存弥补了CPU和内存之间的发展差异，带来了好处，自然就会带来一些问题。</p>\n<h1 id=\"可见性\">可见性<a href=\"2020/03/11/深入理解volatile和并发编程的三大特性#可见性\"></a></h1><p>多个线程同时对共享变量进行操作，但是实际的运算是与本地内存和CPU交互，运算结果是线程之间不可见的，只有操作之后将本地内存副本刷新到主存，其他线程再去读取才是最新的值，如果操作完成，还没来得及刷新到主内存，其他线程就会拿到旧值，这样就会对结果造成影响。</p>\n<p>在Java中我们就可以使用<strong>volatile关键字</strong>或者是<strong>加锁</strong>来保证可见性</p>\n<p>被volatile修饰的变量一旦被更改就会立即把结果刷新到主内存，保证了变量的可见性。</p>\n<h1 id=\"原子性\">原子性<a href=\"2020/03/11/深入理解volatile和并发编程的三大特性#原子性\"></a></h1><p>原子性是指<strong>一个操作是不可中断的，要么全部执行成功要么全部执行失败，有着“同生共死”的感觉</strong>。及时在多个线程一起执行的时候，一个操作一旦开始，就不会被其他线程所干扰。</p>\n<h1 id=\"有序性\">有序性<a href=\"2020/03/11/深入理解volatile和并发编程的三大特性#有序性\"></a></h1><h2 id=\"重排序\">重排序<a href=\"2020/03/11/深入理解volatile和并发编程的三大特性#重排序\"></a></h2><p>根据Java内存模型中的规定，可以总结出以下几条happens-before规则8。Happens-before的前后两个操作不会被重排序且后者对前者的内存可见。</p>\n<ul>\n<li>程序次序法则：线程中的每个动作A都happens-before于该线程中的每一个动作B，其中，在程序中，所有的动作B都能出现在A之后。</li>\n<li>监视器锁法则：对一个监视器锁的解锁 happens-before于每一个后续对同一监视器锁的加锁。</li>\n<li>volatile变量法则：<strong>对volatile域的写入操作happens-before于每一个后续对同一个域的读写操作。</strong></li>\n<li>线程启动法则：在一个线程里，对Thread.start的调用会happens-before于每个启动线程的动作。</li>\n<li>线程终结法则：线程中的任何动作都happens-before于其他线程检测到这个线程已经终结、或者从Thread.join调用中成功返回，或Thread.isAlive返回false。</li>\n<li>中断法则：一个线程调用另一个线程的interrupt happens-before于被中断的线程发现中断。</li>\n<li>终结法则：一个对象的构造函数的结束happens-before于这个对象finalizer的开始。</li>\n<li>传递性：如果A happens-before于B，且B happens-before于C，则A happens-before于C</li>\n</ul>\n<h1 id=\"volatile\">volatile<a href=\"2020/03/11/深入理解volatile和并发编程的三大特性#volatile\"></a></h1><ul>\n<li>volatile可以保证可见性，数据一旦修改可以及时更新到主存，可以杜绝更改之后没来得及刷新到主存而其他线程读取旧值而造成的异步问题</li>\n<li>volatile可以一定程度上保证有序性<ol>\n<li>所有在 volatile 修饰的变量写操作之前的写操作，将会对随后该 volatile 修饰的变量读操作之后的语句可见。</li>\n<li>禁止 JVM 重排序：volatile 修饰的变量的读写指令不能和其前后的任何指令重排序，其前后的指令可能会被重排序。</li>\n</ol>\n</li>\n</ul>\n","prev":{"title":"fitsSystemWindows相关总结","link":"2020/03/18/fitsSystemWindows相关总结"},"next":{"title":"Android消息机制深入了解","link":"2020/03/08/Android消息机制深入了解"},"plink":"https://treeeeeeee.github.io/2020/03/11/深入理解volatile和并发编程的三大特性/","toc":[{"title":"一切之前","id":"一切之前","index":"1","children":[{"title":"JMM抽象结构模型","id":"JMM抽象结构模型","index":"1.1"}]},{"title":"可见性","id":"可见性","index":"2"},{"title":"原子性","id":"原子性","index":"3"},{"title":"有序性","id":"有序性","index":"4","children":[{"title":"重排序","id":"重排序","index":"4.1"}]},{"title":"volatile","id":"volatile","index":"5"}]}