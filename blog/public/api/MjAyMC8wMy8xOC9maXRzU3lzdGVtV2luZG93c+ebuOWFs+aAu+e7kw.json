{"title":"fitsSystemWindows相关总结","date":"2020-03-18T15:50:07.000Z","date_formatted":{"ll":"Mar 18, 2020","L":"03/18/2020","MM-DD":"03-18"},"link":"2020/03/18/fitsSystemWindows相关总结","comments":true,"tags":["归纳总结"],"categories":["Android"],"updated":"2020-04-02T02:10:13.208Z","content":"<h2 id=\"先上结论\">先上结论<a href=\"#先上结论\" title=\"先上结论\"></a></h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:fitsSystemWindows=\"true\"</span><br></pre></td></tr></table></figure><ul><li><p>默认情况下，设置它的view会添加一些内边距，用来留出一些系统的window的区域，例如状态栏或者底部的虚拟键盘</p><blockquote><p>日常我们最常见的就只有这两个，但不排除其他或者后面会出现的一些新的系统window要留出，所以一旦设置这个属性之后你自己设置的<strong>所有的padding都会失效，上下左右全部，记住是全部</strong></p></blockquote><p>另外在xml文件里，配置了这个属性为true的，<strong>哪个控件写在前面谁的就生效</strong>，而且<strong>只能生效一个</strong>，在它之后的后不会生效。</p></li><li><p>View是可以对<code>fitsSystemWindows</code>进行个性化的，也就是说可以替换默认的添加Padding预留系统视窗的操作，最好的例子我们在下面会讲</p></li></ul>","prev":{"title":"kotlin的let、with、run、apply、also系列方法记录","link":"2020/03/27/kotlin的let、with、run、apply、also系列方法记录"},"next":{"title":"深入理解volatile和并发编程的三大特性","link":"2020/03/11/深入理解volatile和并发编程的三大特性"},"plink":"https://treeeeeeee.github.io/2020/03/18/fitsSystemWindows相关总结/","toc":[{"id":"先上结论","title":"先上结论","index":"1"}]}