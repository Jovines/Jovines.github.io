{"title":"kotlin的let、with、run、apply、also系列方法记录","date":"2020-03-26T17:51:47.000Z","link":"2020/03/27/kotlin的let、with、run、apply、also系列方法记录","comments":true,"tags":["记录"],"categories":["Kotlin"],"updated":"2020-03-26T18:26:13.034Z","content":"<h2 id=\"let\">let<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#let\"></a></h2><h4 id=\"使用场景\">使用场景<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#使用场景\"></a></h4><ul>\n<li><strong>场景一:</strong> 最常用的场景就是使用let函数处理需要针对一个可null的对象统一做判空处理。</li>\n<li><strong>场景二:</strong> 然后就是需要去明确一个变量所处特定的作用域范围内可以使用</li>\n</ul>\n<h4 id=\"提醒\">提醒<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#提醒\"></a></h4><p>在函数块内可以通过 it 指代该对象。返回值为函数块的最后一行或指定return表达式</p>\n<h4 id=\"示例\">示例<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#示例\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Any().let &#123; it: Any -&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"with\">with<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#with\"></a></h2><h4 id=\"提醒-1\">提醒<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#提醒-1\"></a></h4><p>在函数块内可以通过 this 指代该对象。返回值为函数块的最后一行或指定return表达式</p>\n<h4 id=\"示例-1\">示例<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#示例-1\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with(Any())&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"run\">run<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#run\"></a></h2><h4 id=\"解释\">解释<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#解释\"></a></h4><p><strong>let和with的结合</strong>，函数块内，可以通过this代指该对象，返回值为函数块的最后一行或指定return表达式</p>\n<h4 id=\"示例-2\">示例<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#示例-2\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Any().run &#123; </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"apply\">apply<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#apply\"></a></h2><p><strong>与run类似，唯一的不同是apply始终返回该对象</strong></p>\n<h4 id=\"示例-3\">示例<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#示例-3\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Any().apply &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"also\">also<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#also\"></a></h2><p><strong>结合apply和let</strong></p>\n<p><strong>函数始终返回该对象，函数类可以通过it访该对象</strong></p>\n<h4 id=\"示例-4\">示例<a href=\"2020/03/27/kotlin的let、with、run、apply、also系列方法记录#示例-4\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Any().also &#123; it: Any -&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>","prev":{"title":"当Activity异常销毁FragmentManager做了什么","link":"2020/03/27/当Activity异常销毁FragmentManager做了什么"},"next":{"title":"关于activity异常销毁重启之后得处理","link":"2020/03/26/关于activity异常销毁重启之后得处理"},"plink":"https://treeeeeeee.github.io/2020/03/27/kotlin的let、with、run、apply、also系列方法记录/","toc":[{"title":"let","id":"let","index":"1"},{"title":"with","id":"with","index":"2"},{"title":"run","id":"run","index":"3"},{"title":"apply","id":"apply","index":"4"},{"title":"also","id":"also","index":"5"}]}