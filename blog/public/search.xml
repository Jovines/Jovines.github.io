<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo+admin+windows+linux服务器的综合博客平台]]></title>
    <url>%2F2019%2F10%2F03%2Fhexo-admin-windows-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%BB%BC%E5%90%88%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0%2F</url>
    <content type="text"><![CDATA[windows下的hexo+github博客搭建博客搭建不多说这里放上大神的知乎，点击自己按照流程来做就好了，下面我做一个归纳整理，也留作备份。 安装Node.js windows下载链接 下载之后一路next就好，环境变量默认会把帮你配好 最后安装好之后，按Win+R打开命令提示符，输入node -v和npm -v，如果出现版本号，那么就安装成功了。 也有没有自动配的情况，可以手动配一下。 添加国内镜像源 如果没有K X S W(这是啥大家都明白吧)的话，可以使用阿里的国内镜像进行加速。 12&gt; npm config set registry https://registry.npm.taobao.org&gt; 安装Git Git的下载链接 安装选项还是全部默认，只不过最后一步添加路径时选择Use Git from the Windows Command Prompt，这样我们就可以直接在命令提示符里打开git了。 安装完成后在命令提示符中输入git --version验证是否安装成功。 同样如果没有找到版本号需要手动配置 注册Github账号 注册地址 注册完成之后进入主页 点击新建项目 项目名称是你的github用户名加.github.io 例如: XXXXX.github.io 同时也可以勾选一下Redme.md ![new p](C:\data\Treeeeeeee.github.io\blog\source_posts\hexo-admin-windows-服务器的综合博客平台\new p.png) 然后按照下面的流程你就可以获得一个最简单的博客 进去之后随便选一个 安装Hexo在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在D:\study\program\blog目录下。 在该目录下右键点击Git Bash Here，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。 定位到该目录下，输入npm i hexo-cli -g安装Hexo。会有几个报错，无视它就行。 安装完后输入hexo -v验证是否安装成功。 然后就要初始化我们的网站，输入hexo init初始化文件夹，接着输入npm install安装必备的组件。 这样本地的网站配置也弄好啦，输入hexo g生成静态网页，然后输入hexo s打开本地服务器，然后浏览器打开http://localhost:4000/，就可以看到我们的博客啦，效果如下： 按ctrl+c关闭本地服务器。 连接Github与本地首先右键打开git bash，然后输入下面命令： 12git config --global user.name "godweiyang"git config --global user.email "792321264@qq.com" 用户名和邮箱根据你注册github的信息自行修改。 然后生成密钥SSH key： 1ssh-keygen -t rsa -C "792321264@qq.com" 打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便。 git bash中输入 1cat ~/.ssh/id_rsa.pub 将输出的内容复制到框中，点击确定保存。 输入ssh -T git@github.com，如果如下图所示，出现你的用户名，那就成功了。 打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。 修改最后一行的配置： 1234deploy: type: git repo: branch: master repository或者repo修改为你自己的github项目地址 我这里默认的是使用ssh，如果想使用https点击更换就好了 我推荐使用ssh，毕竟你已经在你的github中添加了你本机的ssh，免得再输密码 如果不懂ssh可以先使用https，后面我们做服务器的自动git用ssh会更好，如果不需要，而且是在windows下使用的话那就https的吧，没啥关系，windows有记住密码的功能 写文章、发布文章首先在博客根目录下右键打开git bash，安装一个扩展npm i hexo-deployer-git。 然后输入hexo new post &quot;article title&quot;，新建一篇文章。 article title 替换成你要写的文章的名字，需要注意一下： 最好使用英文，使用中文的话博客的url会非常长 如果想插入图片的话，打开你的博客目录里面的_config.yml找到post_asset_folder:属性，并复制未true，这样生成一篇新文章时，会在 12&gt; \source\_posts&gt; 目录下生成一个 文章名.md 文件外，附带生成一个与 文章名 同名的文件夹，可以用它来存放这篇文章的所有资源，比如图片，附件等。这样在文章中插入图片使用相对路径就可以即在本地书写的时候看到图片，又在生成的博客中看到，例如： 在文章中直接这样插入，就可以完美插入图片。详细可以借鉴我另外一篇博客 这里推荐一个超好用加方便的markdown编辑软件Typora，而且恰好支持这种图片资源文件，设置一下可以把任意来源图片直接弄到对应文件夹 这样设置以后你不管是从网络上来的图片还是任意地方拖动的进来的图片都会自动给你放到这个文件夹 然后打开D:\study\program\blog\source\_posts的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。 编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章啦。 绑定域名现在默认的域名还是xxx.github.io，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。 以我的百度云为例，如下图所示，添加两条解析记录： 然后打开你的github博客项目，点击settings，拉到下面Custom domain处，填上你自己的域名，保存： 这时候你的项目根目录应该会出现一个名为CNAME的文件了。如果没有的话，打开你本地博客/source目录，我的是D:\study\program\blog\source，新建CNAME文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行hexo g、hexo d上传到github。 备份博客源文件有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。 我的备份方法 随便找个文件夹，右键打开git bash，依次执行以下命令 123&gt; git clone 你的博客仓库地址&gt; git checkout -b backup&gt; 然后删除你拉下来的所有东西文件夹，如果你开了隐藏文件夹也可见的话别把.git文件夹删除了，如果没开就放心删除所有文件吧（看见.git别动就对了） 然后把你你的整个博客文件夹移动到这里，并删除你博客文件下里面所有叫.gitignore的文件，通常来说，博客源码根目录有一个，主题文件夹里面都有 .gitignore文件是用来说明那些东西不被git push的，具体请自行百度 然后继续依次执行以下命令 1234&gt; git add .&gt; git commit -s -m &quot;backup&quot;&gt; git push&gt; 等待完成就可以在任何地方直接拉下来使用了，在其他地方使用有以下几个要注意的： 环境必须安装这个没得说 如果你是使用shh来部署的项目需要把这台设备的生成的ssh添加到你的github账号里 指的是你前面属性repo :是用的https的还是ssh的 其他备份方法(该内容是粘贴复制) 首先在github博客仓库下新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下。 然后git branch -b hexo切换到hexo分支，然后git add .，然后git commit -m &quot;xxx&quot;，最后git push origin hexo提交就行了。 博客源代码下载个性化设置（matery主题）常见问题及解答（FAQ）个性化设置|更换主题|效果图 我的博客地址有什么问题可以在文章下评论留言 inside主题 直接下载源码放到你的博客源码目录的themes目录里面，并修改_config.yml文件中theme:属性，然后执行： 12hexo ghexo s 浏览器访问：localhost:4000 就能直接看到效果了 具体配置我就不详细说明了可以去看主题制作者的博客：链接]]></content>
      <categories>
        <category>兴趣</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
        <tag>浪费了大好青春</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试]]></title>
    <url>%2F2019%2F10%2F03%2F%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[git再不行我吃屎]]></content>
  </entry>
  <entry>
    <title><![CDATA[完美的hexo中插入图片的解决方案]]></title>
    <url>%2F2019%2F10%2F01%2Fhexo%E4%B8%8B%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[完美的hexo中插入图片的解决方案以下内容来自ETRD的《hexo中完美插入本地图片》，摘录整理关键部分，留作备份。 Markdown编辑器 Typora 不需要关注太多markdown语法就能写出比较好看的markdown，支持实时转换 Hexo配置文件的设置 确保你的Hexo的配置文件_config.yml里面有个这个选项配置，并将其置为true 1post_asset_folder: true 这个功能实际上是Hexo官方文档中提到的资源文件夹功能，它的作用在于当你使用 1hexo new 生成一篇新文章时，会在 1\source\_posts 目录下生成一个 文章名.md 文件外，附带生成一个与 文章名 同名的文件夹，可以用它来存放这篇文章的所有资源，比如图片，附件等 实际上我通常喜欢自己右键手动去建立一个md文件来写博客，而不使用hexo new命令，此时要达到同样的效果，我同样也需要手动去建立一个同名的文件夹去存放资源，我试过这样做是可行的，并且这样做虽然有点麻烦，但我似乎发现了它的一个优点，那就是当我的文章中没有图片时，我并不需要这个空的资源文件夹。 有了上面的配置，Hexo在public文件下生成html文件时，会在相应的目录中把那文章对应的资源文件夹中的图片等附件复制过去，例如，这是我生成的一个例子： 安装hexo-asset-image插件你需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image，我目前安装的是最新的0.03版本，使用如下命令安装插件 1npm install https://github.com/CodeFalling/hexo-asset-image --save 插件安装完以后，实际上是存放在下面的目录文件夹下 1\blog\node_modules\hexo-asset-image 想要卸载这个插件怎么处理，我听说直接删掉这个文件夹，反正我这么试过了。 md文件的时间标签hexo-asset-image的原理应该是根据Hexo生成html后以时间的为目录的规则，将我们图片的相对地址转换成了生成后与时间对应目录的绝对地址，因此我认为md文件中应该要有时间标签，一来是为了让Hexo根据md的时间标签来确定文章的新旧排序，如果没有时间标签，Hexo会把md文件的修改时间作为发布时间，这显然是不合理的，再者这个时间标签，我想hexo-asset-image也会引用到，在一篇实际的博文中，我的md文件完整的开头是这样的： 1---title: hexo中完美插入本地图片date: 2017-01-23 11:00:55categories: hexo使用tags: - hexo- 本地图片- hexo-asset-image--- 插入图片由于每个md文件都有对应的一个资源文件夹，因此，你首先要把需要插入的图片放到这个资源文件夹下，然后进行路径引用，这是上面插入图片时的实际引用代码 1![QQ截图20170123114005](/hexo中完美插入本地图片/QQ截图20170123114005.png) 使用Typora又有一个十分方便的地方在于，只需要将图片往这里一拖就插入了，但其实际拖入图片后的插入代码是绝对路径的引用，是这样的 1![QQ截图20170123114005](K:\FangCloudSync\Github博客源码\blog\source\_posts\hexo中完美插入本地图片\QQ截图20170123114005.png) 对比上面的两个代码，我只需要将前面的那段绝对路径删掉K:\FangCloudSync\Github博客源码\blog\source_posts ，然后再将剩余的两个\分别换成/ 就可以了 这样子，Typora编辑时同时能够看到插入的图片。 生成测试在很多网友的文章中，这么做就可以了，你可以尝试一下生成并本地测试，看看是否博客的首页及博文的正文页都能够正确显示图片，或者打开博文生成的html源文件，找到图片插入的地方看看src路径是否是对应public后的绝对路径，如下示例这样 1&lt;p&gt;&lt;img src=&quot;/2017/01/22/Windows下远程桌面连接树莓派3代/QQ截图20170122163331.png&quot; alt=&quot;QQ截图20170122163331&quot;&gt;&lt;/p&gt; 如果本地预览主页和博文正文页显示图片都没有问题，并且html源文件内的图片源地址是上面的格式，那你真幸运没有遇到什么麻烦。 生成绝对路径不完整的问题我发现我做了上面的工作后，生成并本地测试查看，图片并不能正确显示，我查看了html文件，它生成的路径是这样的 1&lt;p&gt;&lt;img src=&quot;/22/imagetest/500.jpg&quot; alt=&quot;500&quot;&gt;&lt;/p&gt; 看起来hexo-asset-image的确起了点作用，但似乎有点问题，它生成的绝对路径不完整，仿佛只获取了日，年月没获取到，因为这个md文件的时间是2017-01-22，所以”/2017/01” 似乎没有生成啊，对比上面正确正常的绝对路径，我不明白这是什么原因导致的，也许有可能是我使用的hexo懒人包导致的，Google了一晚上好像就我一个人有这种情况，最后我也在Github上向该插件的作者递交了我遇到的麻烦，但估计等到作者回复不知道是何时了。 今天早上，我受到自定义修改插件，更便捷的使用七牛空间 这篇文章的启发，决定自己也尝试修改插件代码试试能否解决。虽然完全不懂js代码，但还是尝试阅读了那段极其简练的代码，这是其中一段： 1var link = data.permalink;var beginPos = getPosition(link, &apos;/&apos;, 3) + 1;// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.var endPos = link.lastIndexOf(&apos;/&apos;) + 1; link = link.substring(beginPos, endPos); 可以猜测出来这段点大概是在获取博文生成的绝对路径，然后最后与md文件中的相对路径做一个拼接，但这个函数中 1var beginPos = getPosition(link, &apos;/&apos;, 3) + 1; 为什么是寻找第3个’/‘？虽然我不知道，但这样做肯定有作者的意图，只是我不懂其中的原理不理解，不可能这个关键的数字是错的。但我假设如果完整的路径应该是/2017/01/22，那么第3个/似乎正好是日期里面的日，跟我的html生成的不完整的路径点似乎有点关联，因此如果这个数字修改为1，那么是不是就能将/2017/01补上了，试试看吧，然而，幸运的是，成功了！ 1var beginPos = getPosition(link, &apos;/&apos;, 1) + 1;//just by launcher 小结需要插入本地图片，并让Hexo启用资源文件的功能，每个md文件对应一个资源文件夹，然而这只是方便了资源的管理，插入图片时不推荐使用hexo官方说的不伦不类的标签插入方法，因为编辑md文件时无法预览图片，而需要安装hexo-asset-image插件，这样正常使用markdown语法对图片的相对路径引用，即可实现编辑时可预览图片，且发布时插件自动将相对路径转为绝对路径。如果碰到与我同样的生成的绝对路径不完全的情况，尝试修改插件的js代码，但修改器建议先备份它，我认为我所解决我遇到问题的方法可能是一种巧合，但我暂时先这么使用了，最终的原因和处理方法可能还需要等待Github上该插件作者的官方回应。]]></content>
      <categories>
        <category>兴趣</category>
      </categories>
      <tags>
        <tag>hexo配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于酷q平台的管理机器人]]></title>
    <url>%2F2019%2F10%2F01%2F%E5%9F%BA%E4%BA%8E%E9%85%B7q%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%AE%A1%E7%90%86%E6%9C%BA%E5%99%A8%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[酷Q机器人 自从samrtQQ下线之后，很多QQ机器人都失效了。 但是最近又比较想用这样一个机器人来管理减轻自己的一些工作，于是千方百计的我发现了酷Q。 这里附上官网链接 开发以及注意事项 SDK的选择酷q提供了多种SDK但是都是我不常用的，官方的支持的SDK是E语言，这语言emmmm好，都好，写，都可以写。虽然提供了java的sdk但是java版本始终不是正统，咬牙学了一天E语言，最后还是吐了。没办法，不习惯，没说E语言不好。害，最后还是选择的java版本。不过但是还没开始使用的时候我看到了更加好用的一个找到一个更加好用方便的SDK-PicqBotX，这是通过http的插件来与酷q的程序交互。虽然不能像官方网站上提供的那个那样可以直接打包成jar运行但是个人认为开发更加简单。 环境以及配置细节 这里讲得很清楚，以下说明几个坑： 如果使用kotlin代替java进行开发，请最好使用Gradle对项目进行管理，它对kotlin有更加完美的支持。 在介绍readme中的这个位置一定要看准，下载对应版本的工具，否则可能出问题，比较麻烦，而且没有提示难以排查。 两个端口号一定要对应于你程序中的机器人的端口号否则会链接失败（建议直接用默认的31091 31092，也可自己选择） 本人开发流程 使用idea新建项目选择gradle管理项目java版本任意，需要kotlin开发勾选kotlin 导包 导入最新的sdk。 根据需要复制示例代码更改 1234567891011121314151617181920212223242526272829303132public class TestBot&#123; public static void main(String[] args) &#123; // 创建机器人对象 ( 传入配置 ) PicqBotX bot = new PicqBotX(new PicqConfig(31092).setDebug(true)); // 添加一个机器人账户 ( 名字, 发送URL, 发送端口 ) bot.addAccount("Bot01", "127.0.0.1", 31091); // 注册事件监听器, 可以注册多个监听器 bot.getEventManager().registerListeners( new TestListener(), new RequestListener(), new ExceptionListener() ); // 启用指令管理器 // 这些字符串是指令前缀, 比如指令"!help"的前缀就是"!" bot.enableCommandManager("bot -", "!", "/", "~"); // 注册指令, 可以注册多个指令 bot.getCommandManager().registerCommands( new CommandSay(), new CommandTest(), new CommandVersion() ); // 启动机器人, 不会占用主线程 bot.startBot(); &#125;&#125; 个人实现效果和功能 通知功能 请假功能 有学生请假则会以json格式文本保存在服务器（或者本地） 导出请假表格文档，会直接给下载链接 补登请假 还有安卓端的管理app和网页版实时查看数据。 部署机器人用到的库 阿帕奇的表格框架 gson 通知管理机器人源代码地址：冷漠无情的机器人 因为源代码中有不少私人数据，所以取消。]]></content>
      <categories>
        <category>兴趣</category>
      </categories>
      <tags>
        <tag>世界这么大，当然要多去看看</tag>
      </tags>
  </entry>
</search>
