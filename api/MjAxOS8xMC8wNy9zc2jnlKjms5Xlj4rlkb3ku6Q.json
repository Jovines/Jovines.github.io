{"title":"ssh用法及命令","date":"2019-10-07T09:34:23.000Z","date_formatted":{"ll":"Oct 7, 2019","L":"10/07/2019","MM-DD":"10-07"},"link":"2019/10/07/ssh用法及命令","comments":true,"updated":"2019-12-30T02:50:50.957Z","content":"<p><a href=\"https://blog.csdn.net/pipisorry/article/details/52269785\" target=\"_blank\">原文链接</a></p>\n<h1 id=\"什么是ssh？\">什么是SSH？<a href=\"#什么是ssh？\" title=\"什么是SSH？\"></a></h1><p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。<br>SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH，它是自由软件，应用非常广泛。这里只讨论SSH在Linux Shell中的用法。如果要在Windows系统中使用SSH，会用到另一种软件PuTTY，这需要另文介绍。</p>\n<h2 id=\"中间人攻击\">中间人攻击<a href=\"#中间人攻击\" title=\"中间人攻击\"></a></h2><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。<br>整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。<br>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。<br>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的”中间人攻击”（Man-in-the-middle attack）。</p>\n<h1 id=\"ssh的安装\">ssh的安装<a href=\"#ssh的安装\" title=\"ssh的安装\"></a></h1><p>SSH分客户端openssh-client和openssh-server</p>\n<p>如果你只是想登陆别的机器的SSH只需要安装openssh-client（ubuntu有默认安装，如果没有则sudoapt-get install openssh-client），如果要使本机开放SSH服务就需要安装openssh-server。</p>\n<p>Ubuntu缺省已经安装了ssh client。</p>\n<h2 id=\"配置ssh\">#配置ssh#<a href=\"#配置ssh\" title=\"#配置ssh#\"></a></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo -e \"\\033[31;1m ******************************* \\033[0m\"</span><br><span class=\"line\">echo -e \"\\033[31;1m ************安装和配置ssh************ \\033[0m\"</span><br><span class=\"line\">sudo apt-get install -y openssh-server 1&gt; /dev/null</span><br><span class=\"line\">sudo sed -i 's/UsePAM no/UsePAM yes/g' /etc/ssh/sshd_config</span><br><span class=\"line\">sudo sed -i '8a /etc/init.d/ssh start' /etc/profile</span><br><span class=\"line\">sudo /etc/init.d/ssh start</span><br><span class=\"line\">ps -e | grep ssh</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e \"\\033[31;1m ssh授权 \\033[0m\"</span><br><span class=\"line\">cd ~/.ssh/</span><br><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\">cat ./id_rsa.pub &gt;&gt; ./authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ps -e|grep ssh</span></span><br><span class=\"line\"> 2151 ?        00:00:00 ssh-agent</span><br><span class=\"line\"></span><br><span class=\"line\"> 5313 ?        00:00:00 sshd</span><br><span class=\"line\"></span><br><span class=\"line\">ssh-agent表示ssh-client启动，sshd表示ssh-server启动了。</span><br><span class=\"line\"></span><br><span class=\"line\">如果缺少sshd，说明ssh服务没有启动或者没有安装。</span><br></pre></td></tr></table></figure><h1 id=\"ssh基本用法\">SSH基本用法<a href=\"#ssh基本用法\" title=\"SSH基本用法\"></a></h1><h2 id=\"ssh远程登录\">SSH远程登录<a href=\"#ssh远程登录\" title=\"SSH远程登录\"></a></h2><h3 id=\"口令登录\">口令登录<a href=\"#口令登录\" title=\"口令登录\"></a></h3><p>假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh user@host  如：ssh pika@192.168.0.111</span></span><br></pre></td></tr></table></figure><p>如果本地用户名与远程用户名一致，登录时可以省略用户名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh host</span></span><br></pre></td></tr></table></figure><p>SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh -p 2222 user@host</span></span><br></pre></td></tr></table></figure><p>上面这条命令表示，ssh直接连接远程主机的2222端口。<br>如果你是第一次登录对方主机，系统会出现下面的提示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh user@host</span></span><br><span class=\"line\"></span><br><span class=\"line\">The authenticity of host 'host (12.18.429.21)' can't be established.</span><br><span class=\"line\">RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？<br>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。<br>很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。<br>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。<br>    　　<code>Are you sure you want to continue connecting (yes/no)? yes</code><br>系统会出现一句提示，表示host主机已经得到认可。<br>    　　<code>Warning: Permanently added &#39;host,12.18.429.21&#39; (RSA) to the list of known hosts.</code><br>然后，会要求输入密码。<br>    　　<code>Password: (enter password)</code><br>如果密码正确，就可以登录了。<br>当远程主机的公钥被接受以后，它就会被保存在文件$HOME/.ssh/known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。<br>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是/etc/ssh/ssh_known_hosts，保存一些对所有用户都可信赖的远程主机的公钥。</p>\n<p>如果本地用户名与远程用户名一致，登录时可以省略用户名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh host</span></span><br></pre></td></tr></table></figure><p>SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh -p 2222 user@host</span></span><br></pre></td></tr></table></figure><p>上面这条命令表示，ssh直接连接远程主机的2222端口。<br>如果你是第一次登录对方主机，系统会出现下面的提示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host 'host (12.18.429.21)' can't be established.</span><br><span class=\"line\">    　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span><br><span class=\"line\">    　　Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？<br>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。<br>很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。<br>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。<br>​    　　<code>Are you sure you want to continue connecting (yes/no)? yes</code><br>系统会出现一句提示，表示host主机已经得到认可。<br>​    　　<code>Warning: Permanently added &#39;host,12.18.429.21&#39; (RSA) to the list of known hosts.</code><br>然后，会要求输入密码。<br>​    　　<code>Password: (enter password)</code><br>如果密码正确，就可以登录了。<br>当远程主机的公钥被接受以后，它就会被保存在文件$HOME/.ssh/known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。<br>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是/etc/ssh/ssh_known_hosts，保存一些对所有用户都可信赖的远程主机的公钥。</p>\n<h3 id=\"公钥登录\">公钥登录<a href=\"#公钥登录\" title=\"公钥登录\"></a></h3><p>使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。<br>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。<br>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-keygen</span></span><br></pre></td></tr></table></figure><p>运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。<br>运行结束以后，在$HOME/.ssh/目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。<br>这时再输入下面的命令，将公钥传送到远程主机host上面：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-copy-id user@host</span></span><br></pre></td></tr></table></figure><p>好了，从此你再登录，就不需要输入密码了。<br>如果还是不行，就打开远程主机的/etc/ssh/sshd_config这个文件，检查下面几行前面”#”注释是否取掉。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后，重启远程主机的ssh服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ubuntu系统</span></span><br><span class=\"line\">service ssh restart</span><br></pre></td></tr></table></figure><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># debian系统</span></span><br><span class=\"line\">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><p>authorized_keys文件<br>远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/authorized_keys文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。<br>这里不使用上面的ssh-copy-id命令，改用下面的命令，解释公钥的保存过程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh user@host <span class=\"string\">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~/.ssh/id_rsa.pub</span></span><br></pre></td></tr></table></figure><p>这条命令由多个语句组成，依次分解开来看：</p>\n<ol><li>“$ ssh user@host”，表示登录远程主机；</li><li>单引号中的mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys，表示登录后在远程shell上执行的命令：</li><li>“$ mkdir -p .ssh”的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；</li><li>‘cat &gt;&gt; .ssh/authorized_keys’ &lt; <del>/.ssh/id_rsa.pub的作用是，将本地的公钥文件</del>/.ssh/id_rsa.pub，重定向追加到远程文件authorized_keys的末尾。<br>写入authorized_keys文件后，公钥登录的设置就完成了。</li></ol><p>然后，重启远程主机的ssh服务。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ubuntu系统</span></span><br><span class=\"line\">service ssh restart</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> debian系统</span></span><br><span class=\"line\">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><p>authorized_keys文件<br>远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/authorized_keys文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。<br>这里不使用上面的ssh-copy-id命令，改用下面的命令，解释公钥的保存过程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh user@host <span class=\"string\">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~/.ssh/id_rsa.pub</span></span><br></pre></td></tr></table></figure><p>这条命令由多个语句组成，依次分解开来看：（1）”$ ssh user@host”，表示登录远程主机；（2）单引号中的mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys，表示登录后在远程shell上执行的命令：（3）”$ mkdir -p .ssh”的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；（4）’cat &gt;&gt; .ssh/authorized_keys’ &lt; <del>/.ssh/id_rsa.pub的作用是，将本地的公钥文件</del>/.ssh/id_rsa.pub，重定向追加到远程文件authorized_keys的末尾。<br>写入authorized_keys文件后，公钥登录的设置就完成了。</p>\n<p>[SSH原理与运用（一）：远程登录]</p>\n<p>使用ssh在远程后台不中断地跑程序<br>Linux关闭ssh（关闭终端等）后运行的程序或者服务自动停止，如python3 a.py &amp;。</p>\n<p>解决：使用nohup命令让程序在关闭窗口（切换SSH连接）的时候程序还能继续在后台运行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup python3 a.py &amp;</span><br></pre></td></tr></table></figure><p>[linux进程管理与SELinux]</p>\n<h2 id=\"ssh连接中断\">ssh连接中断<a href=\"#ssh连接中断\" title=\"ssh连接中断\"></a></h2><p>如果使用的是iTerm2，要让ssh不断线： profiles -&gt; sessions -&gt; When idel, send ASCII code</p>\n<p>其它命令行客户端，通过配置 ServerAliveInterval 来实现，在 ~/.ssh/config 中加入： ServerAliveInterval=30。表示ssh客户端每隔30秒给远程主机发送一个no-op包，no-op是无任何操作的意思，这样远程主机就不会关闭这个SSH会话。</p>\n<p>vim ~/.ssh/config，然后新增</p>\n<p>Host *<br>    ServerAliveInterval 60<br>60秒就好了，而且基本去连的机器都保持，所以配置了*，如果有需要针对某个机器，可以自行配置为需要的serverHostName。</p>\n<p>[ssh保持连接不断开]</p>\n<h2 id=\"ssh远程操作\">SSH远程操作<a href=\"#ssh远程操作\" title=\"SSH远程操作\"></a></h2><h3 id=\"ssh数据传输\">SSH数据传输<a href=\"#ssh数据传输\" title=\"SSH数据传输\"></a></h3><p>SSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。<br>    　　$ ssh user@host ‘mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys’ &lt; ~/.ssh/id_rsa.pub<br>单引号中间的部分，表示在远程主机上执行的操作；后面的输入重定向，表示数据通过SSH传向远程主机。<br>这就是说，SSH可以在用户和远程主机之间，建立命令和数据的传输通道，因此很多事情都可以通过SSH来完成。<br>下面看几个例子。<br>【例1】<br>将$HOME/src/目录下面的所有文件，复制到远程主机的$HOME/src/目录。<br>    　　$ cd &amp;&amp; tar czv src | ssh user@host ‘tar xz’<br>【例2】<br>将远程主机$HOME/src/目录下面的所有文件，复制到用户的当前目录。<br>    　　$ ssh user@host ‘tar cz src’ | tar xzv<br>【例3】<br>查看远程主机是否运行进程httpd。<br>    　　$ ssh user@host ‘ps ax | grep [h]ttpd’</p>\n<p>lz建议使用scp进行远程copy：</p>\n<p>scp 跨机远程拷贝<br>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。两台主机之间复制文件必需得同时有两台主机的复制执行帐号和操作权限。</p>\n<h3 id=\"scp命令参数\">scp命令参数<a href=\"#scp命令参数\" title=\"scp命令参数\"></a></h3><ul><li>-1 强制scp命令使用协议ssh1</li><li>-2 强制scp命令使用协议ssh2</li><li>-4 强制scp命令只使用IPv4寻址</li><li>-6 强制scp命令只使用IPv6寻址</li><li>-B 使用批处理模式（传输过程中不询问传输口令或短语）</li><li>-C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</li><li>-p 留原文件的修改时间，访问时间和访问权限。</li><li>-q 不显示传输进度条。</li><li>-r 递归复制整个目录。</li><li>-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</li><li>-c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</li><li>-F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。</li><li>-i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</li><li>-l limit 限定用户所能使用的带宽，以Kbit/s为单位。</li><li>-o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式，</li><li>-P port 注意是大写的P, port是指定数据传输用到的端口号</li><li>-S program 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</li><li>scp一般有六种使用方法<ul><li>本地复制远程文件：（把远程的文件复制到本地）</li><li>scp <a href=\"mailto:root@www.test.com\">root@www.test.com</a>:/val/test/test.tar.gz /val/test/test.tar.gz<br>远程复制本地文件：（把本地的文件复制到远程主机上）</li><li>scp /val/test.tar.gz <a href=\"mailto:root@www.test.com\">root@www.test.com</a>:/val/test.tar.gz<br>本地复制远程目录：（把远程的目录复制到本地）</li><li>scp -r <a href=\"mailto:root@www.test.com\">root@www.test.com</a>:/val/test/ /val/test/<br>远程复制本地目录：（把本地的目录复制到远程主机上）</li><li>scp -r ./ubuntu_env/ <a href=\"mailto:root@192.168.0.111\">root@192.168.0.111</a>:/home/pipi</li><li>pika:/media/pika/files/machine_learning/datasets$scp -r SocialNetworks/</li><li><a href=\"mailto:piting@192.168.0.172\">piting@192.168.0.172</a>:/media/data/pipi/datasets</li></ul></li><li>本地复制远程文件到指定目录：（把远程的文件复制到本地）</li><li>scp <a href=\"mailto:root@www.test.com\">root@www.test.com</a>:/val/test/test.tar.gz /val/test/<br>远程复制本地文件到指定目录：（把本地的文件复制到远程主机上）</li><li>scp /val/test.tar.gz <a href=\"mailto:root@www.test.com\">root@www.test.com</a>:/val/</li></ul><p>ps: scp复制文件时只指定服务器地址不加路径默认复制到哪里???</p>\n<p>[12个scp传输文件的命令栗子]</p>\n<p>[scp 跨机远程拷贝]</p>\n<h2 id=\"ssh端口操作\">SSH端口操作<a href=\"#ssh端口操作\" title=\"SSH端口操作\"></a></h2><h3 id=\"绑定本地端口\">绑定本地端口<a href=\"#绑定本地端口\" title=\"绑定本地端口\"></a></h3><p>既然SSH可以传送数据，那么我们可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性。<br>假定我们要让8080端口的数据，都通过SSH传向远程主机，命令就这样写：<br>    　　$ ssh -D 8080 user@host<br>SSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口。</p>\n<h3 id=\"本地端口转发\">本地端口转发<a href=\"#本地端口转发\" title=\"本地端口转发\"></a></h3><p>有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的”端口转发”。为了区别后文的”远程端口转发”，我们把这种情况称为”本地端口转发”（Local forwarding）。<br>假定host1是本地主机，host2是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台host3，可以同时连通前面两台主机。因此，很自然的想法就是，通过host3，将host1连上host2。<br>我们在host1执行下面的命令：<br>    　　$ ssh -L 2121:host2:21 host3<br>命令中的L参数一共接受三个值，分别是”本地端口:目标主机:目标主机端口”，它们之间用冒号分隔。这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）。<br>这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口。<br>    　　$ ftp localhost:2121<br>“本地端口转发”使得host1和host3之间仿佛形成一个数据传输的秘密隧道，因此又被称为”SSH隧道”。<br>下面是一个比较有趣的例子。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh -L 5900:localhost:5900 host3</span></span><br></pre></td></tr></table></figure><p>它表示将本机的5900端口绑定host3的5900端口（这里的localhost指的是host3，因为目标主机是相对host3而言的）。<br>另一个例子是通过host3的端口转发，ssh登录host2。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh -L 9001:host2:22 host3</span></span><br></pre></td></tr></table></figure><p>这时，只要ssh登录本机的9001端口，就相当于登录host2了。 　　</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh -p 9001 localhost</span></span><br></pre></td></tr></table></figure><p>上面的-p参数表示指定登录端口。</p>\n<p>出错处理：ssh: Could not resolve hostname 192.168.<em>.</em>:***: Name or service not known</p>\n<p>解决：指定端口不能直接使用ip:端口号，使用-p参数来解决就可以了。</p>\n<h3 id=\"远程端口转发\">远程端口转发<a href=\"#远程端口转发\" title=\"远程端口转发\"></a></h3><p>既然”本地端口转发”是指绑定本地端口的转发，那么”远程端口转发”（remote forwarding）当然是指绑定远程端口的转发。<br>还是接着看上面那个例子，host1与host2之间无法连通，必须借助host3转发。但是，特殊情况出现了，host3是一台内网机器，它可以连接外网的host1，但是反过来就不行，外网的host1连不上内网的host3。这时，”本地端口转发”就不能用了，怎么办？<br>解决办法是，既然host3可以连host1，那么就从host3上建立与host1的SSH连接，然后在host1上使用这条连接就可以了。<br>我们在host3执行下面的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh -R 2121:host2:21 host1</span></span><br></pre></td></tr></table></figure><p>R参数也是接受三个值，分别是”远程主机端口:目标主机:目标主机端口”。这条命令的意思，就是让host1监听它自己的2121端口，然后将所有数据经由host3，转发到host2的21端口。由于对于host3来说，host1是远程主机，所以这种情况就被称为”远程端口绑定”。<br>绑定之后，我们在host1就可以连接host2了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ftp localhost:2121</span></span><br></pre></td></tr></table></figure><p>这里必须指出，”远程端口转发”的前提条件是，host1和host3两台主机都有sshD和ssh客户端。</p>\n<h1 id=\"ssh的其他参数\">SSH的其他参数<a href=\"#ssh的其他参数\" title=\"SSH的其他参数\"></a></h1><p>SSH还有一些别的参数，也值得介绍。<br>N参数，表示只连接远程主机，不打开远程shell；T参数，表示不为这个连接分配TTY。这个两个参数可以放在一起用，代表这个SSH连接只用来传数据，不执行远程操作。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh -NT -D 8080 host</span></span><br></pre></td></tr></table></figure><p>f参数，表示SSH连接成功后，转入后台运行。这样一来，你就可以在不中断SSH连接的情况下，在本地shell中执行其他操作。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh -f -D 8080 host</span></span><br></pre></td></tr></table></figure><p>要关闭这个后台连接，就只有用kill命令去杀掉进程。</p>\n","prev":{"title":"java面向对象-接口和其他的类","link":"2019/10/12/java面向对象-接口和其他的类"},"next":{"title":"git push 解决 弹出用户名和密码输入框","link":"2019/10/04/git-push-解决-弹出用户名和密码输入框"},"plink":"https://treeeeeeee.github.io/2019/10/07/ssh用法及命令/","toc":[{"id":"什么是ssh？","title":"什么是SSH？","index":"1","children":[{"id":"中间人攻击","title":"中间人攻击","index":"1.1"}]},{"id":"ssh的安装","title":"ssh的安装","index":"2","children":[{"id":"配置ssh","title":"#配置ssh#","index":"2.1"}]},{"id":"ssh基本用法","title":"SSH基本用法","index":"3","children":[{"id":"ssh远程登录","title":"SSH远程登录","index":"3.1","children":[{"id":"口令登录","title":"口令登录","index":"3.1.1"},{"id":"公钥登录","title":"公钥登录","index":"3.1.2"}]},{"id":"ssh连接中断","title":"ssh连接中断","index":"3.2"},{"id":"ssh远程操作","title":"SSH远程操作","index":"3.3","children":[{"id":"ssh数据传输","title":"SSH数据传输","index":"3.3.1"},{"id":"scp命令参数","title":"scp命令参数","index":"3.3.2"}]},{"id":"ssh端口操作","title":"SSH端口操作","index":"3.4","children":[{"id":"绑定本地端口","title":"绑定本地端口","index":"3.4.1"},{"id":"本地端口转发","title":"本地端口转发","index":"3.4.2"},{"id":"远程端口转发","title":"远程端口转发","index":"3.4.3"}]}]},{"id":"ssh的其他参数","title":"SSH的其他参数","index":"4"}]}