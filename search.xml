<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试</title>
      <link href="/2019/10/02/%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/10/02/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>完美的hexo中插入图片的解决方案</title>
      <link href="/2019/10/01/hexo%E4%B8%8B%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
      <url>/2019/10/01/hexo%E4%B8%8B%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="完美的hexo中插入图片的解决方案">完美的hexo中插入图片的解决方案<a href="2019/10/01/hexo下完美插入图片#完美的hexo中插入图片的解决方案"></a></h1><p>以下内容来自ETRD的<a href="[http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/](http://etrd.org/2017/01/23/hexo中完美插入本地图片/)">《hexo中完美插入本地图片》</a>，摘录整理关键部分，留作备份。</p><h3 id="Markdown编辑器">Markdown编辑器<a href="2019/10/01/hexo下完美插入图片#Markdown编辑器"></a></h3><ul><li><p><strong>Typora</strong></p><blockquote><p>不需要关注太多markdown语法就能写出比较好看的markdown，支持实时转换</p></blockquote></li></ul><h3 id="Hexo配置文件的设置">Hexo配置文件的设置<a href="2019/10/01/hexo下完美插入图片#Hexo配置文件的设置"></a></h3><p> 确保你的Hexo的配置文件_config.yml里面有个这个选项配置，并将其置为true</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></div></figure><p> 这个功能实际上是Hexo官方文档中提到的资源文件夹功能，它的作用在于当你使用</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new</span><br></pre></td></tr></table></div></figure><p>生成一篇新文章时，会在</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\source\_posts</span><br></pre></td></tr></table></div></figure><p>目录下生成一个 文章名.md 文件外，附带生成一个与 文章名 同名的文件夹，可以用它来存放这篇文章的所有资源，比如图片，附件等</p><p><a href="http://etrd.org/2017/01/23/hexo中完美插入本地图片/QQ截图20170123112354.png" target="_blank" rel="noopener"><img src="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/QQ%E6%88%AA%E5%9B%BE20170123112354.png" alt="QQ截图20170123112354"></a></p><p>实际上我通常喜欢自己右键手动去建立一个md文件来写博客，而不使用hexo new命令，此时要达到同样的效果，我同样也需要手动去建立一个同名的文件夹去存放资源，我试过这样做是可行的，并且这样做虽然有点麻烦，但我似乎发现了它的一个优点，那就是当我的文章中没有图片时，我并不需要这个空的资源文件夹。</p><p>有了上面的配置，Hexo在public文件下生成html文件时，会在相应的目录中把那文章对应的资源文件夹中的图片等附件复制过去，例如，这是我生成的一个例子：</p><p><a href="http://etrd.org/2017/01/23/hexo中完美插入本地图片/QQ截图20170123114005.png" target="_blank" rel="noopener"><img src="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/QQ%E6%88%AA%E5%9B%BE20170123114005.png" alt="QQ截图20170123114005"></a></p><h3 id="安装hexo-asset-image插件">安装hexo-asset-image插件<a href="2019/10/01/hexo下完美插入图片#安装hexo-asset-image插件"></a></h3><p>你需要安装一个图片路径转换的插件，这个插件名字是<strong>hexo-asset-image</strong>，我目前安装的是最新的0.03版本，使用如下命令安装插件</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></div></figure><p>插件安装完以后，实际上是存放在下面的目录文件夹下</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\blog\node_modules\hexo-asset-image</span><br></pre></td></tr></table></div></figure><p>想要卸载这个插件怎么处理，我听说直接删掉这个文件夹，反正我这么试过了。</p><h3 id="md文件的时间标签">md文件的时间标签<a href="2019/10/01/hexo下完美插入图片#md文件的时间标签"></a></h3><p>hexo-asset-image的原理应该是根据Hexo生成html后以时间的为目录的规则，将我们图片的相对地址转换成了生成后与时间对应目录的绝对地址，因此我认为md文件中应该要有时间标签，一来是为了让Hexo根据md的时间标签来确定文章的新旧排序，如果没有时间标签，Hexo会把md文件的修改时间作为发布时间，这显然是不合理的，再者这个时间标签，我想hexo-asset-image也会引用到，在一篇实际的博文中，我的md文件完整的开头是这样的：</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---title: hexo中完美插入本地图片date: 2017-01-23 11:00:55categories: hexo使用tags: - hexo- 本地图片- hexo-asset-image---</span><br></pre></td></tr></table></div></figure><h3 id="插入图片">插入图片<a href="2019/10/01/hexo下完美插入图片#插入图片"></a></h3><p>由于每个md文件都有对应的一个资源文件夹，因此，你首先要把需要插入的图片放到这个资源文件夹下，然后进行路径引用，这是上面插入图片时的实际引用代码</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![QQ截图20170123114005](/hexo中完美插入本地图片/QQ截图20170123114005.png)</span><br></pre></td></tr></table></div></figure><p>使用Typora又有一个十分方便的地方在于，只需要将图片往这里一拖就插入了，但其实际拖入图片后的插入代码是绝对路径的引用，是这样的</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![QQ截图20170123114005](K:\FangCloudSync\Github博客源码\blog\source\_posts\hexo中完美插入本地图片\QQ截图20170123114005.png)</span><br></pre></td></tr></table></div></figure><p>对比上面的两个代码，我只需要将前面的那段绝对路径删掉<del>K:\FangCloudSync\Github博客源码\blog\source_posts</del> ，然后再将剩余的<strong>两个\分别换成/</strong> 就可以了</p><p>这样子，Typora编辑时同时能够看到插入的图片。</p><h3 id="生成测试">生成测试<a href="2019/10/01/hexo下完美插入图片#生成测试"></a></h3><p>在很多网友的文章中，这么做就可以了，你可以尝试一下生成并本地测试，看看是否博客的首页及博文的正文页都能够正确显示图片，或者打开博文生成的html源文件，找到图片插入的地方看看src路径是否是对应public后的绝对路径，如下示例这样</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;img src=&quot;/2017/01/22/Windows下远程桌面连接树莓派3代/QQ截图20170122163331.png&quot; alt=&quot;QQ截图20170122163331&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></div></figure><p>如果本地预览主页和博文正文页显示图片都没有问题，并且html源文件内的图片源地址是上面的格式，那你真幸运没有遇到什么麻烦。</p><h3 id="生成绝对路径不完整的问题">生成绝对路径不完整的问题<a href="2019/10/01/hexo下完美插入图片#生成绝对路径不完整的问题"></a></h3><p>我发现我做了上面的工作后，生成并本地测试查看，图片并不能正确显示，我查看了html文件，它生成的路径是这样的</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;img src=&quot;/22/imagetest/500.jpg&quot; alt=&quot;500&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></div></figure><p>看起来hexo-asset-image的确起了点作用，但似乎有点问题，它生成的绝对路径不完整，仿佛只获取了日，年月没获取到，因为这个md文件的时间是2017-01-22，所以”/2017/01” 似乎没有生成啊，对比上面正确正常的绝对路径，我不明白这是什么原因导致的，也许有可能是我使用的hexo懒人包导致的，Google了一晚上好像就我一个人有这种情况，最后我也在Github上向该插件的作者递交了我遇到的麻烦，但估计等到作者回复不知道是何时了。</p><p>今天早上，我受到<a href="http://error408.com/2016/08/02/Hexo七牛图床使用/" target="_blank" rel="noopener">自定义修改插件，更便捷的使用七牛空间</a> 这篇文章的启发，决定自己也尝试修改插件代码试试能否解决。虽然完全不懂js代码，但还是尝试阅读了那段极其简练的代码，这是其中一段：</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var link = data.permalink;var beginPos = getPosition(link, &apos;/&apos;, 3) + 1;// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.var endPos = link.lastIndexOf(&apos;/&apos;) + 1;   link = link.substring(beginPos, endPos);</span><br></pre></td></tr></table></div></figure><p>可以猜测出来这段点大概是在获取博文生成的绝对路径，然后最后与md文件中的相对路径做一个拼接，但这个函数中</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var beginPos = getPosition(link, &apos;/&apos;, 3) + 1;</span><br></pre></td></tr></table></div></figure><p>为什么是寻找第3个’/‘？虽然我不知道，但这样做肯定有作者的意图，只是我不懂其中的原理不理解，不可能这个关键的数字是错的。但我假设如果完整的路径应该是/2017/01/22，那么第3个/似乎正好是日期里面的日，跟我的html生成的不完整的路径点似乎有点关联，因此如果这个数字修改为1，那么是不是就能将/2017/01补上了，试试看吧，然而，幸运的是，成功了！</p><figure class="highlight plain"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var beginPos = getPosition(link, &apos;/&apos;, 1) + 1;//just by launcher</span><br></pre></td></tr></table></div></figure><h3 id="小结">小结<a href="2019/10/01/hexo下完美插入图片#小结"></a></h3><p>需要插入本地图片，并让Hexo启用资源文件的功能，每个md文件对应一个资源文件夹，然而这只是方便了资源的管理，插入图片时不推荐使用hexo官方说的不伦不类的标签插入方法，因为编辑md文件时无法预览图片，而需要安装hexo-asset-image插件，这样正常使用markdown语法对图片的相对路径引用，即可实现编辑时可预览图片，且发布时插件自动将相对路径转为绝对路径。如果碰到与我同样的生成的绝对路径不完全的情况，尝试修改插件的js代码，但修改器建议先备份它，我认为我所解决我遇到问题的方法可能是一种巧合，但我暂时先这么使用了，最终的原因和处理方法可能还需要等待Github上该插件作者的官方回应。</p>]]></content>
      
      
      <categories>
          
          <category> 兴趣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于酷q平台的管理机器人</title>
      <link href="/2019/10/01/%E5%9F%BA%E4%BA%8E%E9%85%B7q%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%AE%A1%E7%90%86%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/2019/10/01/%E5%9F%BA%E4%BA%8E%E9%85%B7q%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%AE%A1%E7%90%86%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="酷Q机器人">酷Q机器人<a href="2019/10/01/基于酷q平台的管理机器人#酷Q机器人"></a></h2><hr><p><strong>自从samrtQQ下线之后，很多QQ机器人都失效了。</strong></p><p><strong>但是最近又比较想用这样一个机器人来管理减轻自己的一些工作，于是千方百计的我发现了酷Q。</strong></p><p><strong>这里附上<a href="https://cqp.cc/" target="_blank" rel="noopener">官网链接</a></strong></p><h3 id="开发以及注意事项">开发以及注意事项<a href="2019/10/01/基于酷q平台的管理机器人#开发以及注意事项"></a></h3><ol><li><h5 id="SDK的选择"><a href="2019/10/01/基于酷q平台的管理机器人#SDK的选择" class="headerlink" title="SDK的选择"></a>SDK的选择</h5><p>酷q提供了多种<a href="https://cqp.cc/t/15124" target="_blank" rel="noopener">SDK</a>但是都是我不常用的，官方的支持的SDK是E语言，这语言emmmm好，都好，写，都可以写。虽然提供了java的sdk但是java版本始终不是正统，咬牙学了一天E语言，最后还是吐了。没办法，不习惯，没说E语言不好。害，最后还是选择的java版本。不过但是还没开始使用的时候我看到了更加好用的一个找到一个更加好用方便的SDK-<a href="https://github.com/HyDevelop/PicqBotX" target="_blank" rel="noopener">PicqBotX</a>，这是通过http的插件来与酷q的程序交互。虽然不能像官方网站上提供的那个那样可以直接打包成jar运行但是个人认为开发更加简单。</p></li><li><p><strong>环境以及配置细节</strong></p><p><a href="https://github.com/HyDevelop/PicqBotX" target="_blank" rel="noopener">这里讲得很清楚，以下说明几个坑</a>：</p><ul><li><p>如果使用kotlin代替java进行开发，请最好使用Gradle对项目进行管理，它对kotlin有更加完美的支持。</p></li><li><p><img src="/2019/10/01/基于酷q平台的管理机器人/%E9%85%B7q%E9%85%8D%E7%BD%AE%E5%9D%8F%E5%A2%83%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.jpg" alt class="article-img"></p><p>在介绍readme中的这个位置一定要看准，下载对应版本的工具，否则可能出问题，比较麻烦，而且没有提示难以排查。</p></li><li><p>两个端口号一定要对应于你程序中的机器人的端口号否则会链接失败（建议直接用默认的31091 31092，也可自己选择）</p></li></ul></li></ol><h3 id="本人开发流程">本人开发流程<a href="2019/10/01/基于酷q平台的管理机器人#本人开发流程"></a></h3><ol><li><p>使用idea新建项目选择gradle管理项目<img src="/2019/10/01/基于酷q平台的管理机器人/idea%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt>java版本任意，需要kotlin开发勾选kotlin</p></li><li><p>导包</p><p><img src="/2019/10/01/基于酷q平台的管理机器人/%E5%AF%BC%E5%8C%85.png" alt class="article-img"></p><p>导入最新的sdk。</p></li><li><p>根据需要复制示例代码更改</p><figure class="highlight java"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBot</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建机器人对象 ( 传入配置 )</span></span><br><span class="line">        PicqBotX bot = <span class="keyword">new</span> PicqBotX(<span class="keyword">new</span> PicqConfig(<span class="number">31092</span>).setDebug(<span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加一个机器人账户 ( 名字, 发送URL, 发送端口 )</span></span><br><span class="line">        bot.addAccount(<span class="string">"Bot01"</span>, <span class="string">"127.0.0.1"</span>, <span class="number">31091</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册事件监听器, 可以注册多个监听器</span></span><br><span class="line">        bot.getEventManager().registerListeners(</span><br><span class="line">                <span class="keyword">new</span> TestListener(), </span><br><span class="line">                <span class="keyword">new</span> RequestListener(),</span><br><span class="line">                <span class="keyword">new</span> ExceptionListener()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启用指令管理器</span></span><br><span class="line">        <span class="comment">// 这些字符串是指令前缀, 比如指令"!help"的前缀就是"!"</span></span><br><span class="line">        bot.enableCommandManager(<span class="string">"bot -"</span>, <span class="string">"!"</span>, <span class="string">"/"</span>, <span class="string">"~"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册指令, 可以注册多个指令</span></span><br><span class="line">        bot.getCommandManager().registerCommands(</span><br><span class="line">                <span class="keyword">new</span> CommandSay(),</span><br><span class="line">                <span class="keyword">new</span> CommandTest(),</span><br><span class="line">                <span class="keyword">new</span> CommandVersion()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动机器人, 不会占用主线程</span></span><br><span class="line">        bot.startBot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ol><h3 id="个人实现效果和功能">个人实现效果和功能<a href="2019/10/01/基于酷q平台的管理机器人#个人实现效果和功能"></a></h3><ul><li><p>通知功能</p><img src="/2019/10/01/基于酷q平台的管理机器人/通知.jpg" style="zoom:50%;"></li><li><p>请假功能</p><p>有学生请假则会以json格式文本保存在服务器（或者本地）</p><img src="/2019/10/01/基于酷q平台的管理机器人/请假.jpg" style="zoom: 33%;"></li><li><p>导出请假表格文档，会直接给下载链接</p><img src="/2019/10/01/基于酷q平台的管理机器人/请假文档.jpg" style="zoom: 50%;"></li><li><p>补登请假</p><img src="/2019/10/01/基于酷q平台的管理机器人/补登请假.jpg" style="zoom: 50%;"></li><li><p>还有安卓端的管理app和网页版实时查看数据。</p></li></ul><h3 id="部署机器人">部署机器人<a href="2019/10/01/基于酷q平台的管理机器人#部署机器人"></a></h3><h3 id="用到的库">用到的库<a href="2019/10/01/基于酷q平台的管理机器人#用到的库"></a></h3><hr><ul><li>阿帕奇的表格框架</li><li>gson</li></ul><p>通知管理机器人源代码地址：<a href>冷漠无情的机器人</a></p><p>因为源代码中有不少私人数据，所以取消。</p>]]></content>
      
      
      <categories>
          
          <category> 兴趣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 世界这么大，当然要多去看看 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
